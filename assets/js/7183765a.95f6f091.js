"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[17365],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(t),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},48902:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],s={description:"Author: @wingkwong, @ganajayant| https://leetcode.com/problems/swap-nodes-in-pairs/"},l="0024 - Swap Nodes in Pairs (Medium)",d={unversionedId:"0000-0099/swap-nodes-in-pairs-medium",id:"0000-0099/swap-nodes-in-pairs-medium",title:"0024 - Swap Nodes in Pairs (Medium)",description:"Author: @wingkwong, @ganajayant| https://leetcode.com/problems/swap-nodes-in-pairs/",source:"@site/solutions/0000-0099/0024-swap-nodes-in-pairs-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/swap-nodes-in-pairs-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/swap-nodes-in-pairs-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0024-swap-nodes-in-pairs-medium.md",tags:[],version:"current",sidebarPosition:24,frontMatter:{description:"Author: @wingkwong, @ganajayant| https://leetcode.com/problems/swap-nodes-in-pairs/"},sidebar:"tutorialSidebar",previous:{title:"0023 - Merge k Sorted Lists (Hard)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/merge-k-sorted-lists-hard"},next:{title:"0028 - Implement strStr() (Easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/implement-strstr-easy"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement:",id:"problem-statement",level:2},{value:"Approach 1: Recursive",id:"approach-1-recursive",level:2},{value:"Approach 2: Iterative",id:"approach-2-iterative",level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}},m=c("Tabs"),h=c("TabItem"),f=c("SolutionAuthor"),w={toc:u};function k(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0024---swap-nodes-in-pairs-medium"},"0024 - Swap Nodes in Pairs (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/swap-nodes-in-pairs/"},"https://leetcode.com/problems/swap-nodes-in-pairs/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement:"),(0,a.kt)("p",null,"Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [1,2,3,4]\nOutput: [2,1,4,3]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = []\nOutput: []\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [1]\nOutput: [1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[0, 100]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= Node.val <= 10"))),(0,a.kt)("h2",{id:"approach-1-recursive"},"Approach 1: Recursive"),(0,a.kt)("p",null,"For each round, we just need to take care of two nodes to be swapped. The remaining nodes are passed to the next call. First, we check if we can take two nodes. If not, return head. Otherwise, take the first two nodes and process the following logic."),(0,a.kt)("p",null,"Let's think of the second node first. If two nodes are swapped, the second node will link to the first node after swapping. Therefore, we can simply link the second node to the first node. After swapping, the first one will link to the all nodes linked by the original second node. We just need to call swapPairs again to handle it."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        // check if it is possible to take two nodes\n        if (head == nullptr || head->next == nullptr) return head;\n        // take the first node\n        ListNode* f = head;\n        // take the second node\n        ListNode* s = head->next;\n        // the first node links to all nodes originally linked by the second node\n        f->next = swapPairs(s->next);\n        // the second node links to the first node\n        s->next = f; \n        // return head\n        return s;\n    }\n};\n")))),(0,a.kt)("h2",{id:"approach-2-iterative"},"Approach 2: Iterative"),(0,a.kt)("p",null,"See, we need to swap adjacent nodes right, So can we see that as a linked list in which we have to swap a linked list of length 2 and then after doing on that, we can move it further.\nExample:\n1->2->3->4\nAfter swapping first part or linked list of length 2, It would be\n2->1->3->4\nNow we need to go to 3->4 and do on the same on it and final answer would become\n2->1->4->3\nFor this new linked list of length 2, We maintain two variables currentnode and nextnode denoting first and last of that linked list.\nNow we need to think how would we connect those linked list of len 2, For this I maintained two variables previousnode which is helping to form this linked list."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(f,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n\n        ListNode currentnode = head;\n        ListNode previousnode = null;\n\n        while (currentnode != null && currentnode.next != null) {\n            ListNode nextnode = currentnode.next;\n            if (previousnode == null) {\n                currentnode.next = nextnode.next;\n                nextnode.next = currentnode;\n                head = nextnode;\n            } else {\n                currentnode.next = nextnode.next;\n                previousnode.next = nextnode;\n                nextnode.next = currentnode;\n            }\n\n            previousnode = currentnode;\n            currentnode = currentnode.next;\n        }\n\n        return head;\n    }\n}\n")))))}k.isMDXComponent=!0}}]);