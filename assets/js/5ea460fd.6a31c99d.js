"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[72187],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return h}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),d=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(r),h=a,m=c["".concat(u,".").concat(h)]||c[h]||s[h]||o;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},88288:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return y},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return c}});var n,a=r(87462),o=r(63366),l=(r(67294),r(3905)),i=["components"],u={title:"Binary Tree",description:"Binary Tree is a tree structure in which eacho node only contains at most two children",keywords:["leetcode","tutorial","binary tree","data structure"]},d=void 0,p={unversionedId:"graph-theory/binary-tree",id:"graph-theory/binary-tree",title:"Binary Tree",description:"Binary Tree is a tree structure in which eacho node only contains at most two children",source:"@site/tutorials/graph-theory/binary-tree.md",sourceDirName:"graph-theory",slug:"/graph-theory/binary-tree",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/binary-tree",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/tutorials/graph-theory/binary-tree.md",tags:[],version:"current",frontMatter:{title:"Binary Tree",description:"Binary Tree is a tree structure in which eacho node only contains at most two children",keywords:["leetcode","tutorial","binary tree","data structure"]},sidebar:"tutorialSidebar",previous:{title:"Bellman Ford Algorithm",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/bellman-ford-algorithm"},next:{title:"Breadth First Search (BFS)",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/breadth-first-search"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Properties",id:"properties",level:2},{value:"Traversal",id:"traversal",level:2},{value:"Pre-order",id:"pre-order",level:3},{value:"In-order",id:"in-order",level:3},{value:"Post-order",id:"post-order",level:3},{value:"Summary",id:"summary",level:3}],h=(n="TutorialAuthors",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),m={toc:c};function y(e){var t=e.components,r=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(h,{names:"@wingkwong",mdxType:"TutorialAuthors"}),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"Binary Tree is a tree structure in which each node only contains at most two children, often referred as left and right child."),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The number on nodes on level '",(0,l.kt)("em",{parentName:"li"},"l"),"' is equal to the 2",(0,l.kt)("sup",null,(0,l.kt)("em",{parentName:"li"},"l")),", like on level 0 (root node) we got 2",(0,l.kt)("sup",null,"0"),"=1 node only."),(0,l.kt)("li",{parentName:"ul"},"The Maximum number of nodes in a binary tree of height \u2018h\u2019 is 2",(0,l.kt)("sup",null,"h")," \u2013 1. ")),(0,l.kt)("h2",{id:"traversal"},"Traversal"),(0,l.kt)("p",null,"There are different ways to traverse trees - In-order, Pre-order, and Post-order. Supposing we have a binary tree with 5 nodes,"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/35857179/180000691-7634f6e6-1c2b-4e6e-a52a-83f3218e2d6b.png",alt:"image"})),(0,l.kt)("h3",{id:"pre-order"},"Pre-order"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Visit the root"),(0,l.kt)("li",{parentName:"ul"},"Traverse the left sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Traverse the right sub-tree")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void preorder(TreeNode* node) {\n    if (node == NULL) return;\n    s.push_back(node->val);\n    preorder(node->left);\n    preorder(node->right);\n}\n")),(0,l.kt)("h3",{id:"in-order"},"In-order"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Traverse the left sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Visit the root"),(0,l.kt)("li",{parentName:"ul"},"Traverse the right sub-tree")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void inorder(TreeNode* node) {\n    if (node == NULL) return;\n    inorder(node->left);\n    s.push_back(node->val);\n    inorder(node->right);\n}\n")),(0,l.kt)("h3",{id:"post-order"},"Post-order"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Traverse the left sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Traverse the right sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Visit the root")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void postorder(TreeNode* node) {\n    if (node == NULL) return;\n    postorder(node->left);\n    postorder(node->right);\n    s.push_back(node->val);\n}\n")),(0,l.kt)("h3",{id:"summary"},"Summary"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Traversal"),(0,l.kt)("th",{parentName:"tr",align:null},"Path"),(0,l.kt)("th",{parentName:"tr",align:null},"Order"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pre-order"),(0,l.kt)("td",{parentName:"tr",align:null},"1 -> 2 -> 4 -> 5 -> 3"),(0,l.kt)("td",{parentName:"tr",align:null},"Root -> Left -> Right")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"In-order"),(0,l.kt)("td",{parentName:"tr",align:null},"4 -> 2 -> 5 -> 1 -> 3"),(0,l.kt)("td",{parentName:"tr",align:null},"Left -> Root -> Right")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Post-order"),(0,l.kt)("td",{parentName:"tr",align:null},"4 -> 5 -> 2 -> 3 -> 1"),(0,l.kt)("td",{parentName:"tr",align:null},"Left -> Right -> Root")))))}y.isMDXComponent=!0}}]);