"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[87405],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),f=o,d=m["".concat(l,".").concat(f)]||m[f]||c[f]||i;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5491:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var r,o=n(87462),i=n(63366),a=(n(67294),n(3905)),p=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/count-primes/"},s="0204 - Count Primes",u={unversionedId:"0200-0299/count-primes",id:"0200-0299/count-primes",title:"0204 - Count Primes",description:"Author: @wingkwong | https://leetcode.com/problems/count-primes/",source:"@site/solutions/0200-0299/0204-count-primes.md",sourceDirName:"0200-0299",slug:"/0200-0299/count-primes",permalink:"/leetcode-the-hard-way/solutions/0200-0299/count-primes",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0204-count-primes.md",tags:[],version:"current",sidebarPosition:204,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-primes/"},sidebar:"tutorialSidebar",previous:{title:"0202 - Happy Number (Easy)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/happy-number-easy"},next:{title:"0205 - Isomorphic Strings (Easy)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/isomorphic-strings-easy"}},c={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sieve of Eratosthenes",id:"approach-1-sieve-of-eratosthenes",level:2}],f=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),d={toc:m};function h(e){var t=e.components,n=(0,i.Z)(e,p);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0204---count-primes"},"0204 - Count Primes"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-primes/"},"https://leetcode.com/problems/count-primes/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,a.kt)("em",{parentName:"p"},"the number of prime numbers that are strictly less than")," ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 0\nOutput: 0\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 1\nOutput: 0 \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= n <= 5 * 10^6"))),(0,a.kt)("h2",{id:"approach-1-sieve-of-eratosthenes"},"Approach 1: Sieve of Eratosthenes"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"../../tutorials/math/number-theory/sieve-of-eratosthenes"},"Sieve of Eratosthenes"),"."),(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<bool> seiveOfEratosthenes(const int n) {\n      vector<bool> isPrime(n + 1, true);\n      isPrime[0] = isPrime[1] = 0;\n      for (int i = 2; i * i <= n; i++) {\n        if (isPrime[i]) {\n          for (int j = i * i; j <= n; j += i) {\n            isPrime[j] = false;\n          }\n        }\n      }\n      return isPrime;\n    }\n\n    int countPrimes(int n) {\n        if(n < 2) return 0;\n        vector<bool> isPrime = seiveOfEratosthenes(n - 1);\n        int cnt = 0;\n        for(int i = 2; i < n; i++) cnt += isPrime[i] == true;\n        return cnt;\n    }\n};\n")))}h.isMDXComponent=!0}}]);