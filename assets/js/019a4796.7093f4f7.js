"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70112],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59478:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/search-insert-position/"},s="0035 - Search Insert Position (Easy)",u={unversionedId:"0000-0099/search-insert-position-easy",id:"0000-0099/search-insert-position-easy",title:"0035 - Search Insert Position (Easy)",description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/search-insert-position/",source:"@site/solutions/0000-0099/0035-search-insert-position-easy.md",sourceDirName:"0000-0099",slug:"/0000-0099/search-insert-position-easy",permalink:"/leetcode-the-hard-way/solutions/0000-0099/search-insert-position-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0035-search-insert-position-easy.md",tags:[],version:"current",sidebarPosition:35,frontMatter:{description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/search-insert-position/"},sidebar:"tutorialSidebar",previous:{title:"0034 - Find First and Last Position of Element in Sorted Array (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium"},next:{title:"0036 - Valid Sudoku (Easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/valid-sudoku-easy"}},p={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Lower Bound",id:"approach-1-lower-bound",level:2},{value:"Approach 2: Binary Search",id:"approach-2-binary-search",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},d=m("SolutionAuthor"),h=m("Tabs"),y=m("TabItem"),f={toc:c};function g(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0035---search-insert-position-easy"},"0035 - Search Insert Position (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-insert-position/"},"https://leetcode.com/problems/search-insert-position/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."),(0,i.kt)("p",null,"You must write an algorithm with ",(0,i.kt)("inlineCode",{parentName:"p"},"O(log n)")," runtime complexity."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,3,5,6], target = 5\nOutput: 2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,3,5,6], target = 2\nOutput: 1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,3,5,6], target = 7\nOutput: 4\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-104 <= nums[i] <= 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums")," contains ",(0,i.kt)("strong",{parentName:"li"},"distinct")," values sorted in ",(0,i.kt)("strong",{parentName:"li"},"ascending")," order."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-104 <= target <= 10^4"))),(0,i.kt)("h2",{id:"approach-1-lower-bound"},"Approach 1: Lower Bound"),(0,i.kt)("p",null,"We can use STL to get the answer. lower_bound returns the first element which has a value not less than target. We need to subtract ",(0,i.kt)("inlineCode",{parentName:"p"},"nums.begin()")," to get the index."),(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        return lower_bound(nums.begin(), nums.end(), target) - nums.begin();\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-2-binary-search"},"Approach 2: Binary Search"),(0,i.kt)("p",null,"Prerequisite: ",(0,i.kt)("a",{parentName:"p",href:"../../tutorials/basic-topics/binary-search"},"Binary Search"),"."),(0,i.kt)(h,{mdxType:"Tabs"},(0,i.kt)(y,{value:"c++",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        // init the possible range\n        // as we insert at the end of the array, \n        // use nums.size() instead of nums.size() - 1\n        int l = 0, r = nums.size();\n        while (l < r) {\n            // take the lower mid for even elements\n            int m = l + (r - l) / 2;\n            // exclude m\n            if (target > nums[m]) l = m + 1;\n            // include m\n            else r = m;\n        }\n        return l;\n    }\n};\n"))),(0,i.kt)(y,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public static int searchInsert(int[] nums, int target) {\n        return binarySearch(nums, 0, nums.length - 1, target);\n    }\n\n    public static int binarySearch(int arr[], int l, int r, int x) {\n        if (r >= l) {\n            int mid = l + (r - l) / 2;\n            if (arr[mid] == x) {\n                return mid;\n            }\n            if (arr[mid] > x)\n                return binarySearch(arr, l, mid - 1, x);\n            return binarySearch(arr, mid + 1, r, x);\n        }\n        return r + 1;\n    }\n}\n")))))}g.isMDXComponent=!0}}]);