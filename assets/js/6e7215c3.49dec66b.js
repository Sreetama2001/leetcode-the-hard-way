"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[32323],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=u(r),h=o,d=f["".concat(s,".").concat(h)]||f[h]||p[h]||a;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5844:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={description:"Author: @wingkwong, @lonyehan | https://leetcode.com/problems/construct-string-from-binary-tree/",tags:["String","Tree","Depth-First Search","Binary Tree"]},s="0606 - Construct String from Binary Tree (Easy)",u={unversionedId:"0600-0699/construct-string-from-binary-tree-easy",id:"0600-0699/construct-string-from-binary-tree-easy",title:"0606 - Construct String from Binary Tree (Easy)",description:"Author: @wingkwong, @lonyehan | https://leetcode.com/problems/construct-string-from-binary-tree/",source:"@site/solutions/0600-0699/0606-construct-string-from-binary-tree-easy.md",sourceDirName:"0600-0699",slug:"/0600-0699/construct-string-from-binary-tree-easy",permalink:"/leetcode-the-hard-way/solutions/0600-0699/construct-string-from-binary-tree-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0600-0699/0606-construct-string-from-binary-tree-easy.md",tags:[{label:"String",permalink:"/leetcode-the-hard-way/solutions/tags/string"},{label:"Tree",permalink:"/leetcode-the-hard-way/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/leetcode-the-hard-way/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/leetcode-the-hard-way/solutions/tags/binary-tree"}],version:"current",sidebarPosition:606,frontMatter:{description:"Author: @wingkwong, @lonyehan | https://leetcode.com/problems/construct-string-from-binary-tree/",tags:["String","Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0600 - 0699",permalink:"/leetcode-the-hard-way/solutions/category/0600---0699"},next:{title:"0609 - Find Duplicate File in System (Medium)",permalink:"/leetcode-the-hard-way/solutions/0600-0699/find-duplicate-file-in-system-medium"}},c={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],f=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},h=f("Tabs"),d=f("TabItem"),m=f("SolutionAuthor"),g={toc:p};function y(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0606---construct-string-from-binary-tree-easy"},"0606 - Construct String from Binary Tree (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/construct-string-from-binary-tree/"},"https://leetcode.com/problems/construct-string-from-binary-tree/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it."),(0,a.kt)("p",null,"Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: root = [1,2,3,4]\nOutput: "1(2(4))(3)"\nExplanation: Originally, it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. And it will be "1(2(4))(3)"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: root = [1,2,3,null,4]\nOutput: "1(2()(4))(3)"\nExplanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 10^4]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-1000 <= Node.val <= 1000"))),(0,a.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,a.kt)(h,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// Time Complexity: O(N) where N is the number of the nodes in the tree\n// Space Complexity: O(H) where H is the height of the tree. \n// In worse case, H can be N when it is a left skewed binary tree / right skewed binary tree\nclass Solution {\npublic:\n    // case 1: root is nullptr -> ""\n    // case 2: root doesn\'t have left sub tree and right sub tree -> root->val\n    // case 3: root->left is not nullptr -> root->val + (dfs result from left sub tree)\n    // case 4: root->left is nullptr but root->right is not nullptr -> root->val + () \n    // case 5: root->right is not nullptr -> root->val + (dfs result from right sub tree)\n    string tree2str(TreeNode* root) {\n        // handle case 1\n        if (!root) return "";\n        // we convert root->val to string here, then append results from different cases\n        string s = to_string(root->val);\n        // handle case 2\n        // this line is obviously not necessary\n        if (!root->left && !root->right) s += "";  \n        // handle case 3\n        if (root->left) s += "(" + tree2str(root->left) + ")";\n        // handle case 4\n        // alternatively, you can use `else if (root->right) s += "()";`\n        if (!root->left && root->right) s += "()";\n        // handle case 5\n        if (root->right) s += "(" + tree2str(root->right) + ")";\n        return s;\n    }\n};\n'))),(0,a.kt)(d,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# Time Complexity: O(N) where N is the number of the nodes in the tree\n# Space Complexity: O(H) where H is the height of the tree. \n# In worse case, H can be N when it is a left skewed binary tree / right skewed binary tree\nclass Solution:\n    # case 1: root is nullptr -> \"\"\n    # case 2: root doesn't have left sub tree and right sub tree -> root.val\n    # case 3: root.left is not nullptr -> root.val + (dfs result from left sub tree)\n    # case 4: root.left is nullptr but root.right is not nullptr -> root.val + () \n    # case 5: root.right is not nullptr -> root.val + (dfs result from right sub tree)\n    def tree2str(self, root: Optional[TreeNode]) -> str:\n        # handle case 1\n        if root is None:\n            return ''\n        # we convert root.val to string here, then append results from different cases\n        s = str(root.val)\n        # handle case 2\n        # this line is obviously not necessary\n        if root.left is None and root.right is None:\n            s += ''\n        # handle case 3\n        if root.left:\n            s += '({})'.format(self.tree2str(root.left))\n        # handle case 4\n        # alternatively, you can use `elif root.right: s += '()'`\n        if root.left is None and root.right:\n            s += '()'\n        # handle case 5\n        if root.right:\n            s += '({})'.format(self.tree2str(root.right))\n        return s        \n"))),(0,a.kt)(d,{value:"cs",label:"C#",mdxType:"TabItem"},(0,a.kt)(m,{name:"@lonyehan",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class Solution {\n    public string Tree2str(TreeNode root) {\n        if(root == null) return null;\n        \n        string left = Tree2str(root.left);\n        string right = Tree2str(root.right);\n        \n        string result = "";\n        \n        if(left == null && right == null) {\n            result = $"{root.val}";\n        }\n        else if(left != null && right == null) {\n            result = $"{root.val}({left})";\n        }\n        else {\n            result = $"{root.val}({left})({right})";\n        }\n        \n        return result;        \n    }\n}\n')))))}y.isMDXComponent=!0}}]);