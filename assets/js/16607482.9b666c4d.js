"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[17845],{3905:function(e,t,a){a.d(t,{Zo:function(){return l},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function m(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?m(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):m(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},m=Object.keys(e);for(n=0;n<m.length;n++)a=m[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(n=0;n<m.length;n++)a=m[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),i=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,m=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=i(a),h=r,k=u["".concat(o,".").concat(h)]||u[h]||c[h]||m;return a?n.createElement(k,s(s({ref:t},l),{},{components:a})):n.createElement(k,s({ref:t},l))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var m=a.length,s=new Array(m);s[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var i=2;i<m;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},40865:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return p},metadata:function(){return i},toc:function(){return c}});var n=a(87462),r=a(63366),m=(a(67294),a(3905)),s=["components"],p={description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/unique-paths/"},o="0062 - Unique Paths (Medium)",i={unversionedId:"0000-0099/unique-paths-medium",id:"0000-0099/unique-paths-medium",title:"0062 - Unique Paths (Medium)",description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/unique-paths/",source:"@site/solutions/0000-0099/0062-unique-paths-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/unique-paths-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/unique-paths-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0062-unique-paths-medium.md",tags:[],version:"current",sidebarPosition:62,frontMatter:{description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/unique-paths/"},sidebar:"tutorialSidebar",previous:{title:"0061 - Rotate List (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/rotate-list-medium"},next:{title:"0067 - Add Binary (easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/add-binary-easy"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1 : Math",id:"approach-1--math",level:2},{value:"Approach 2: Dynamic programming (Top Down) Memoization",id:"approach-2-dynamic-programming-top-down-memoization",level:2}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.kt)("div",t)}},h=u("Tabs"),k=u("TabItem"),N=u("SolutionAuthor"),d={toc:c};function g(e){var t=e.components,a=(0,r.Z)(e,s);return(0,m.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"0062---unique-paths-medium"},"0062 - Unique Paths (Medium)"),(0,m.kt)("h2",{id:"problem-link"},"Problem Link"),(0,m.kt)("p",null,(0,m.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/unique-paths/"},"https://leetcode.com/problems/unique-paths/")),(0,m.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,m.kt)("p",null,"There is a robot on an ",(0,m.kt)("inlineCode",{parentName:"p"},"m x n")," grid. The robot is initially located at the ",(0,m.kt)("strong",{parentName:"p"},"top-left corner")," (i.e., ",(0,m.kt)("inlineCode",{parentName:"p"},"grid[0][0]"),"). The robot tries to move to the ",(0,m.kt)("strong",{parentName:"p"},"bottom-right corner")," (i.e., ",(0,m.kt)("inlineCode",{parentName:"p"},"grid[m - 1][n - 1]"),"). The robot can only move either down or right at any point in time."),(0,m.kt)("p",null,"Given the two integers ",(0,m.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,m.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,m.kt)("em",{parentName:"p"},"the number of possible unique paths that the robot can take to reach the bottom-right corner"),"."),(0,m.kt)("p",null,"The test cases are generated so that the answer will be less than or equal to ",(0,m.kt)("inlineCode",{parentName:"p"},"2 * 10^9"),"."),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"Example 1:")),(0,m.kt)("p",null,(0,m.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png",alt:null})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"Input: m = 3, n = 7\nOutput: 28\n")),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"Example 2:")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"Input: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n")),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"Constraints:")),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 100"))),(0,m.kt)("h2",{id:"approach-1--math"},"Approach 1 : Math"),(0,m.kt)("p",null,"We need to make ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n - 1 + m - 1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1")))))," steps in total. How many ways to choose from ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m - 1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1")))))," right steps and ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n - 1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1")))))," down steps out of the total steps?"),(0,m.kt)(h,{mdxType:"Tabs"},(0,m.kt)(k,{value:"c++",label:"C++",mdxType:"TabItem"},(0,m.kt)(N,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    template <typename T>\n    T binomial(int64_t N, int64_t K) {\n      if (K < 0 || N < K) return 0;\n      T ret = 1;\n      for (T i = 1; i <= K; ++i) {\n        ret *= N--;\n        ret /= i;\n      }\n      return ret;\n    }\n    \n    int uniquePaths(int m, int n) {\n        return binomial<long long>(m + n - 2, min(m - 1, n - 1));\n    }\n};\n")))),(0,m.kt)("h2",{id:"approach-2-dynamic-programming-top-down-memoization"},"Approach 2: Dynamic programming (Top Down) Memoization"),(0,m.kt)("p",null,"We begin with the position (0,0).\nAt any position (i,j), we make a recursive call to (i+1,j) and (i,j+1) to get the number of paths to the right and below the current node.\nIf (i,j) goes out of bound, there can exist no path from it so we simply return 0.\nIf we reach (n-1,m-1), we have found a path and so in this case we return 1."),(0,m.kt)("p",null,"We are using memoization to store already computed value so it will reduce runtime by just accessing the already computed value"),(0,m.kt)(h,{mdxType:"Tabs"},(0,m.kt)(k,{value:"java",label:"Java",mdxType:"TabItem"},(0,m.kt)(N,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    HashMap<String, Integer> hm = new HashMap<String, Integer>();\n    public int uniquePaths(int m, int n) {\n        String search = Integer.toString(m) + "#" + Integer.toString(n);\n        if (hm.containsKey(search)) {\n            return hm.get(search);\n        } else if (m == 1 && n == 1) {\n            return 1;\n        } else if (m == 0 || n == 0) {\n            return 0;\n        } else {\n            hm.put(search, uniquePaths(m - 1, n) + uniquePaths(m, n - 1));\n            return hm.get(search);\n        }\n    }\n}\n')))))}g.isMDXComponent=!0}}]);