"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[76015],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return h}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(r),h=o,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||a;return r?n.createElement(m,l(l({ref:t},d),{},{components:r})):n.createElement(m,l({ref:t},d))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},83663:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),l=["components"],i={description:"Author: @wingkwong, @ganajayant, @vigneshshiv | https://leetcode.com/problems/binary-tree-postorder-traversal/",tags:["Stack","Tree","Depth-First Search","Binary Tree"]},s="0145 - Binary Tree Postorder Traversal (Easy)",p={unversionedId:"0100-0199/binary-tree-postorder-traversal-easy",id:"0100-0199/binary-tree-postorder-traversal-easy",title:"0145 - Binary Tree Postorder Traversal (Easy)",description:"Author: @wingkwong, @ganajayant, @vigneshshiv | https://leetcode.com/problems/binary-tree-postorder-traversal/",source:"@site/solutions/0100-0199/0145-binary-tree-postorder-traversal-easy.md",sourceDirName:"0100-0199",slug:"/0100-0199/binary-tree-postorder-traversal-easy",permalink:"/leetcode-the-hard-way/solutions/0100-0199/binary-tree-postorder-traversal-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0145-binary-tree-postorder-traversal-easy.md",tags:[{label:"Stack",permalink:"/leetcode-the-hard-way/solutions/tags/stack"},{label:"Tree",permalink:"/leetcode-the-hard-way/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/leetcode-the-hard-way/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/leetcode-the-hard-way/solutions/tags/binary-tree"}],version:"current",sidebarPosition:145,frontMatter:{description:"Author: @wingkwong, @ganajayant, @vigneshshiv | https://leetcode.com/problems/binary-tree-postorder-traversal/",tags:["Stack","Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0144 - Binary Tree Preorder Traversal (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/binary-tree-preorder-traversal-easy"},next:{title:"0148 - Sort List (Medium)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/sort-list-medium"}},d={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS - Post-order traversal",id:"approach-1-dfs---post-order-traversal",level:2},{value:"Approach 2: Iterative",id:"approach-2-iterative",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},h=c("Tabs"),m=c("TabItem"),v=c("SolutionAuthor"),y={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0145---binary-tree-postorder-traversal-easy"},"0145 - Binary Tree Postorder Traversal (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-postorder-traversal/"},"https://leetcode.com/problems/binary-tree-postorder-traversal/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," of a\xa0binary tree, return ",(0,a.kt)("em",{parentName:"p"},"the postorder traversal of its nodes' values"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,null,2,3]\nOutput: [3,2,1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = []\nOutput: []\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1]\nOutput: [1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of the nodes in the tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[0, 100]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-100 <= Node.val <= 100"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Follow up:")," Recursive solution is trivial, could you do it iteratively?"),(0,a.kt)("h2",{id:"approach-1-dfs---post-order-traversal"},"Approach 1: DFS - Post-order traversal"),(0,a.kt)(h,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(v,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// Time Complexity: O(N)\n// Space Complexity: O(N)\n\n// This is a standard post-order traversal problem, I'd suggest to learn in-order and pre-order as well.\n// Here's a short tutorial if you're interested.\n// https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n// then you may try the following problems \n// 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n// 144. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-preorder-traversal/\n\nclass Solution {\npublic:\n    vector<int> ans;\n    void postoder(TreeNode* node) {\n        if (node == NULL) return;\n        postoder(node->left);\n        // traverse the left node\n        postoder(node->right);\n        // traverse the right node\n        ans.push_back(node->val);\n        // do something with node value here\n    }\n    \n    vector<int> postorderTraversal(TreeNode* root) {\n        postoder(root);\n        return ans;\n    }\n};\n"))),(0,a.kt)(m,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(v,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# This is a standard post-order traversal problem, I'd suggest to learn in-order and pre-order as well.\n# Here's a short tutorial if you're interested.\n# https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n# then you may try the following problems \n# 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n# 144. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-preorder-traversal/\n\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        # root -> left  -> right\n        return self.preorderTraversal(root.left) + self.preorderTraversal(root.right) + [root.val] if root else []\n"))),(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(v,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public static List<Integer> postorder(TreeNode root, List<Integer> ll) {\n        if (root == null) {\n            return ll;\n        }\n        ll.add(root.val);\n        postorder(root.left, ll);\n        postorder(root.right, ll);\n        return ll;\n    }\n   public static List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> ll = new LinkedList<Integer>();\n        ll = postorder(root, ll);\n        return ll;\n    }\n}\n")))),(0,a.kt)("h2",{id:"approach-2-iterative"},"Approach 2: Iterative"),(0,a.kt)(h,{mdxType:"Tabs"},(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(v,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n// Time complexity: O(n), where n - # of nodes in tree\n// Space complexity: O(n)\nclass Solution {\n    /**\n     * Sample binary tree\n     * \n     *    1\n     *   / \\\n     *  2   3\n     *\n     */\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> result = new LinkedList<>();\n        Stack<TreeNode> stack = new Stack<>();\n        // Reference for last visited right node, for when parent is on top of the stack\n        TreeNode last = null;\n        while (root != null || !stack.isEmpty()) {\n            // Keep pushing left nodes, all the way down onto stack\n            if (root != null) {\n                stack.push(root);\n                root = root.left;\n            } else {\n                TreeNode node = stack.peek();\n                // When Parent is on top stack, it checks with right node which has a refence in last variable\n                // If both are same, it will not add repeated reference onto stack\n                // Pops out stack top, i.e parent node, and level up higher for other nodes.\n                if (node.right != null && node.right != last) {\n                    root = node.right;\n                } else {\n                    // If any of the right node is empty, the block executes and add value from top of stack\n                    result.add(node.val);\n                    // Pops out stock top\n                    last = stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}\n")))))}f.isMDXComponent=!0}}]);