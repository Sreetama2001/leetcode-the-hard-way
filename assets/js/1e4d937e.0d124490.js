"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[62861],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=i.createContext({}),s=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,f=c["".concat(d,".").concat(m)]||c[m]||u[m]||o;return t?i.createElement(f,a(a({ref:n},p),{},{components:t})):i.createElement(f,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},49265:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=t(87462),r=t(63366),o=(t(67294),t(3905)),a=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/find-all-good-indices/"},d="2420 - Find All Good Indices (Medium)",s={unversionedId:"2400-2499/find-all-good-indices-medium",id:"2400-2499/find-all-good-indices-medium",title:"2420 - Find All Good Indices (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-all-good-indices/",source:"@site/solutions/2400-2499/2420-find-all-good-indices-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/find-all-good-indices-medium",permalink:"/leetcode-the-hard-way/solutions/2400-2499/find-all-good-indices-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2420-find-all-good-indices-medium.md",tags:[],version:"current",sidebarPosition:2420,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-all-good-indices/"},sidebar:"tutorialSidebar",previous:{title:"2419 - Longest Subarray With Maximum Bitwise AND (Medium)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/longest-subarray-with-maximum-bitwise-and-medium"},next:{title:"2425 - Bitwise XOR of All Pairings (Medium)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/bitwise-xor-of-all-pairs-medium"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix &amp; Suffix",id:"approach-1-prefix--suffix",level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)}},m=c("Tabs"),f=c("TabItem"),g=c("SolutionAuthor"),k={toc:u};function h(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2420---find-all-good-indices-medium"},"2420 - Find All Good Indices (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-all-good-indices/"},"https://leetcode.com/problems/find-all-good-indices/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a ",(0,o.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," of size ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," and a positive integer ",(0,o.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,o.kt)("p",null,"We call an index ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," in the range ",(0,o.kt)("inlineCode",{parentName:"p"},"k <= i < n - k")," ",(0,o.kt)("strong",{parentName:"p"},"good")," if the following conditions are satisfied:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"k")," elements that are just ",(0,o.kt)("strong",{parentName:"li"},"before")," the index ",(0,o.kt)("inlineCode",{parentName:"li"},"i")," are in ",(0,o.kt)("strong",{parentName:"li"},"non-increasing")," order."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"k")," elements that are just ",(0,o.kt)("strong",{parentName:"li"},"after")," the index ",(0,o.kt)("inlineCode",{parentName:"li"},"i")," are in ",(0,o.kt)("strong",{parentName:"li"},"non-decreasing")," order.")),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"an array of all good indices sorted in ",(0,o.kt)("strong",{parentName:"em"},"increasing")," order"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [2,1,1,1,3,4,1], k = 2\nOutput: [2,3]\nExplanation: There are two good indices in the array:\n- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.\n- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.\nNote that the index 4 is not good because [4,1] is not non-decreasing.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [2,1,1,2], k = 2\nOutput: []\nExplanation: There are no good indices in this array.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"3 <= n <= 105")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 106")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= k <= n / 2"))),(0,o.kt)("h2",{id:"approach-1-prefix--suffix"},"Approach 1: Prefix & Suffix"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(f,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> goodIndices(vector<int>& nums, int k) {\n        int n = nums.size();\n        // inc[i]: number of elements after the index i are in non-decreasing order\n        // dec[i]: number of elements before the index i are in non-increasing order \n        vector<int> inc(n, 1), dec(n, 1);\n        for (int i = 1; i < n; i++) {\n            // if it's non-increasing, add 1 to the previous state\n            if (nums[i - 1] >= nums[i]) dec[i] = dec[i - 1] + 1;\n            // we don't need to reset to 1 as we init each as 1 at the beginning\n        }\n        for (int i = n - 2; ~i; i--) {\n            // if it's non-decreasing, add 1 to the previous state\n            if (nums[i + 1] >= nums[i]) inc[i] = inc[i + 1] + 1;\n            // we don't need to reset to 1 as we init each as 1 at the beginning\n        }\n        vector<int> ans;\n        // k <= i < n - k\n        for (int i = k; i < n - k; i++) {\n            // how many elements before the index i are in non-increasing order?\n            // how many elements after the index i are in non-decreasing order?\n            if (dec[i - 1] >= k && inc[i + 1] >= k) {\n                ans.push_back(i);\n            }\n        }\n        return ans;\n    }\n};\n")))))}h.isMDXComponent=!0}}]);