"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[7624],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20337:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var r,o=n(87462),i=n(63366),a=(n(67294),n(3905)),s=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/isomorphic-strings/",tags:["Hash Table","String"]},l="0205 - Isomorphic Strings (Easy)",c={unversionedId:"0200-0299/isomorphic-strings-easy",id:"0200-0299/isomorphic-strings-easy",title:"0205 - Isomorphic Strings (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/isomorphic-strings/",source:"@site/solutions/0200-0299/0205-isomorphic-strings-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/isomorphic-strings-easy",permalink:"/leetcode-the-hard-way/solutions/0200-0299/isomorphic-strings-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0205-isomorphic-strings-easy.md",tags:[{label:"Hash Table",permalink:"/leetcode-the-hard-way/solutions/tags/hash-table"},{label:"String",permalink:"/leetcode-the-hard-way/solutions/tags/string"}],version:"current",sidebarPosition:205,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/isomorphic-strings/",tags:["Hash Table","String"]},sidebar:"tutorialSidebar",previous:{title:"0204 - Count Primes",permalink:"/leetcode-the-hard-way/solutions/0200-0299/count-primes"},next:{title:"0207 - Course Schedule (Medium)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/course-schedule-medium"}},u={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map",id:"approach-1-hash-map",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),h={toc:m};function f(e){var t=e.components,n=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0205---isomorphic-strings-easy"},"0205 - Isomorphic Strings (Easy)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given two strings ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),", ",(0,a.kt)("em",{parentName:"p"},"determine if they are isomorphic"),"."),(0,a.kt)("p",null,"Two strings ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," are isomorphic if the characters in ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," can be replaced to get ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,a.kt)("p",null,"All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "egg", t = "add"\nOutput: true\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "foo", t = "bar"\nOutput: false\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "paper", t = "title"\nOutput: true\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 5 * 104")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"t.length == s.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"t")," consist of any valid ascii character.")),(0,a.kt)("h2",{id:"approach-1-hash-map"},"Approach 1: Hash Map"),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        // m1 is used to map s[i] to t[i]\n        // m2 is used to map t[i] to s[i]\n        // example 1:\n        // m1['e'] --\x3e 'a'\n        // m1['g'] --\x3e 'd'\n        // m2['a'] --\x3e 'e'\n        // m2['d'] --\x3e 'g'\n        unordered_map<char, char> m1, m2;\n        for (int i = 0; i < s.size(); i++) {\n            // if s[i] isn't in m1 and t[i] isn't in m2\n            if (!m1.count(s[i]) && !m2.count(t[i])) {\n                // then we can map s[i] to t[i]\n                m1[s[i]] = t[i];\n                // and t[i] to s[i]\n                m2[t[i]] = s[i];\n            } else {\n                // if they are they are isomorphic,\n                // m1[s[i]] should map to t[i], and m2[t[i]] should map to s[i]\n                // we return false here if this condition is not satisfied\n                if (m1[s[i]] != t[i] || m2[t[i]] != s[i]) {\n                    return false;\n                }\n            }\n        }\n        // they are isomorphic\n        return true;\n    }\n};\n")))}f.isMDXComponent=!0}}]);