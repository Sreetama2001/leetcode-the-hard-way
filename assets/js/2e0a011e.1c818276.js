"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[78728],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),h=o(n),u=r,d=h["".concat(p,".").concat(u)]||h[u]||c[u]||s;return n?a.createElement(d,i(i({ref:t},l),{},{components:n})):a.createElement(d,i({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m.mdxType="string"==typeof e?e:r,i[1]=m;for(var o=2;o<s;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},93159:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return m},metadata:function(){return o},toc:function(){return c}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),i=["components"],m={description:"Author: @vigneshshiv | https://leetcode.com/problems/minimum-window-substring/"},p="0076 - Minimum Window Substring (Hard)",o={unversionedId:"0000-0099/minimum-window-substring-hard",id:"0000-0099/minimum-window-substring-hard",title:"0076 - Minimum Window Substring (Hard)",description:"Author: @vigneshshiv | https://leetcode.com/problems/minimum-window-substring/",source:"@site/solutions/0000-0099/0076-minimum-window-substring-hard.md",sourceDirName:"0000-0099",slug:"/0000-0099/minimum-window-substring-hard",permalink:"/leetcode-the-hard-way/solutions/0000-0099/minimum-window-substring-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0076-minimum-window-substring-hard.md",tags:[],version:"current",sidebarPosition:76,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/minimum-window-substring/"},sidebar:"tutorialSidebar",previous:{title:"0075 - Sort Colors (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/sort-colors-medium"},next:{title:"0078 - Subsets (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/subsets-medium"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window with HashMap",id:"approach-1-sliding-window-with-hashmap",level:2},{value:"Approach 2: Sliding Window with ASCII",id:"approach-2-sliding-window-with-ascii",level:2}],h=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)}},u=h("Tabs"),d=h("TabItem"),k=h("SolutionAuthor"),N={toc:c};function g(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"0076---minimum-window-substring-hard"},"0076 - Minimum Window Substring (Hard)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-window-substring/"},"https://leetcode.com/problems/minimum-window-substring/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"Given two strings ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"t")," of lengths ",(0,s.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," respectively, return ",(0,s.kt)("strong",{parentName:"p"},"minimum window substring")," of ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," such that every character in ",(0,s.kt)("inlineCode",{parentName:"p"},"t")," (",(0,s.kt)("strong",{parentName:"p"},"including duplicates"),") is included in the window. If there is no such substring, return the empty string ",(0,s.kt)("inlineCode",{parentName:"p"},'""'),"."),(0,s.kt)("p",null,"The testcases will be generated such that the answer is ",(0,s.kt)("strong",{parentName:"p"},"unique"),"."),(0,s.kt)("p",null,"A ",(0,s.kt)("strong",{parentName:"p"},"substring")," is a contiguous sequence of characters within the string."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: s = "ADOBECODEBANC", t = "ABC"\nOutput: "BANC"\nExplanation: The minimum window substring "BANC" includes \'A\', \'B\', and \'C\' from string t.\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: s = "a", t = "a"\nOutput: "a"\nExplanation: The entire string s is the minimum window.\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 3:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: s = "a", t = "aa"\nOutput: ""\nExplanation: Both \'a\'s from t must be included in the window.\nSince the largest window of s only has one \'a\', return empty string.\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"m == s.length")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"n == t.length")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 10^5")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"t")," consist of uppercase and lowercase English letters.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Follow up:")," Could you find an algorithm that runs in ",(0,s.kt)("inlineCode",{parentName:"p"},"O(m + n)")," time?"),(0,s.kt)("h2",{id:"approach-1-sliding-window-with-hashmap"},"Approach 1: Sliding Window with HashMap"),(0,s.kt)("p",null,"Finding all of T's characters in S, irrespective of order and other characters in a linear time requires two pointer approach. "),(0,s.kt)("p",null,'One of the base case is, T should be smaller than S, Otherwise if T\'s larger than S then return "". But if both strings are equal then T is our answer. '),(0,s.kt)("p",null,"Apart from above mentioned base cases, Here are the simple steps to solve this problem,"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Build a HashMap of T's characters and it's count."),(0,s.kt)("li",{parentName:"ul"},"Iterate through S and move forward with one pointer, and look for each char in map and it's count, If matches then we found one of the matching character."),(0,s.kt)("li",{parentName:"ul"},"Repeat the process until of all T's characters found in S, Once found, that's our minimum window."),(0,s.kt)("li",{parentName:"ul"},"Remove S's unnecessary characters in HashMap starting from first, and find the minimum window. "),(0,s.kt)("li",{parentName:"ul"},"Repeat the 3rd & 4th step until you find the minimum window substring")),(0,s.kt)("p",null,"Time Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(m + n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),", where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"m")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," - # of characters in s and ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - # of characters in t."),(0,s.kt)("p",null,"Space complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,s.kt)(u,{mdxType:"Tabs"},(0,s.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(k,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public String minWindow(String s, String t) {\n        String empty = \"\";\n        int m = s.length(), n = t.length();\n        // If String T length is greater than S, then all of T chars can't fit in S, so return \"\"\n        if (n > m) return empty;\n        // If S & T equals, then that's the min\n        if (m == n && s.equals(t)) return t;\n        // Build T character hashmap and counts\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : t.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        // i - refers start position usually left\n        int i = 0, start = -1, matched = 0, min = s.length() + 1;\n        for (int j = 0; j < m; j++) {\n            char c = s.charAt(j);\n            if (map.containsKey(c)) {\n                map.merge(c, -1, Integer::sum);\n                // If map character matches 0, then found valid char, increase matched by 1\n                if (map.get(c) == 0) {\n                    matched += 1;\n                }\n            }\n            // If matched equals all of T's character, then find minimum window\n            while (matched == map.size()) {\n                if (min > j - i + 1) {\n                    min = j - i + 1;\n                    start = i;\n                }\n                char del = s.charAt(i++);\n                if (map.containsKey(del)) {\n                    // If we are seeing one of T's del char then increase count by 1\n                    // If the char count is 0, then decrement matched by 1 (reason count will be increment by 1)\n                    if (map.get(del) == 0) {\n                        matched -= 1;\n                    }\n                    map.merge(del, 1, Integer::sum);\n                }\n            }\n        }\n        return start == -1 ? empty : s.substring(start, start + min);\n    }\n}\n")))),(0,s.kt)("h2",{id:"approach-2-sliding-window-with-ascii"},"Approach 2: Sliding Window with ASCII"),(0,s.kt)(u,{mdxType:"Tabs"},(0,s.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(k,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    public String minWindow(String s, String t) {\n        String empty = "";\n        int m = s.length(), n = t.length();\n        // If String T length is greater than S, then all of T chars can\'t fit in S, so return ""\n        if (n > m) return empty;\n        // If S & T equals, then that\'s the min\n        if (m == n && s.equals(t)) return t;\n        // Build T character hashmap and counts\n        int[] map = new int[128];\n        for (char c : t.toCharArray()) {\n            map[c] += 1;\n        }\n        // i - refers start position usually left\n        int i = 0, start = -1, matched = 0, min = s.length() + 1;\n        for (int j = 0; j < m; j++) {\n            char c = s.charAt(j);\n            if (map[c]-- > 0) {\n                matched += 1;\n            }\n            while (matched == n) {\n                if (min > j - i + 1) {\n                    min = j - i + 1;\n                    start = i;\n                }\n                char del = s.charAt(i++);\n                if (map[del]++ >= 0) {\n                    matched -= 1;\n                }\n            }\n        }\n        return start == -1 ? empty : s.substring(start, start + min);\n    }\n}\n')))))}g.isMDXComponent=!0}}]);