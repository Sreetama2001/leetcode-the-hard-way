"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[18337],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return N}});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),d=p(n),N=s,c=d["".concat(i,".").concat(N)]||d[N]||h[N]||o;return n?a.createElement(c,r(r({ref:t},l),{},{components:n})):a.createElement(c,r({ref:t},l))}));function N(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=d;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m.mdxType="string"==typeof e?e:s,r[1]=m;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},22112:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return w},frontMatter:function(){return m},metadata:function(){return p},toc:function(){return h}});var a=n(87462),s=n(63366),o=(n(67294),n(3905)),r=["components"],m={description:"Author: @vigneshshiv, @wingkwong | https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},i="0019 - Remove Nth Node From End of List (Easy)",p={unversionedId:"0000-0099/remove-nth-node-from-end-of-list-medium",id:"0000-0099/remove-nth-node-from-end-of-list-medium",title:"0019 - Remove Nth Node From End of List (Easy)",description:"Author: @vigneshshiv, @wingkwong | https://leetcode.com/problems/remove-nth-node-from-end-of-list/",source:"@site/solutions/0000-0099/0019-remove-nth-node-from-end-of-list-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/remove-nth-node-from-end-of-list-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/remove-nth-node-from-end-of-list-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0019-remove-nth-node-from-end-of-list-medium.md",tags:[],version:"current",sidebarPosition:19,frontMatter:{description:"Author: @vigneshshiv, @wingkwong | https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},sidebar:"tutorialSidebar",previous:{title:"0017 - Letter Combinations of a Phone Number (Hard)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/letter-combinations-of-a-phone-number-medium"},next:{title:"0020 - Valid Parentheses (Easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/valid-parentheses-easy"}},l={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Fast and Slow Pointer",id:"approach-1-fast-and-slow-pointer",level:2},{value:"Approach 2: Iteration with One Pass Solution",id:"approach-2-iteration-with-one-pass-solution",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},N=d("Tabs"),c=d("TabItem"),k=d("SolutionAuthor"),u={toc:h};function w(e){var t=e.components,n=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0019---remove-nth-node-from-end-of-list-easy"},"0019 - Remove Nth Node From End of List (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},"https://leetcode.com/problems/remove-nth-node-from-end-of-list/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"nth")," node from the end of the list and return its head."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg",alt:"Alt text"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [1], n = 1\nOutput: []\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [1, 2], n = 1\nOutput: [1]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the list is ",(0,o.kt)("inlineCode",{parentName:"li"},"sz"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= sz <= 30")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= Node.val <= 100")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= sz"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Follow up:")," Could you do this in one pass?"),(0,o.kt)("h2",{id:"approach-1-fast-and-slow-pointer"},"Approach 1: Fast and Slow Pointer"),(0,o.kt)(N,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\nclass Solution {\npublic:\n    // the general idea is to use fast & slow pointers\n    // 1. traverse L - n nodes from the start of the list using fast pointer\n    // where L is the length of the linked list\n    // e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n    // 2. traverse slow pointer until fast pointer reaches the last node\n    // e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n    // 3. update slow next node\n    // e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n    // therefore, we have 1 -> 2 -> 3 -> 5 at the end\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        // move fast pointer to the n + 1 element\n        // now the distance between slow and fast pointer is n nodes\n        while (n--) fast = fast->next;\n        // if fast reached the end, we need to remove the first element\n        // e.g. head = [1], n = 1 \n        if (fast == nullptr) return head->next;\n        // move both pointers at the same time until the fast pointer reaches the end\n        while (fast->next != nullptr) {\n            fast = fast->next;\n            slow = slow->next;\n        }\n        // slow pointer will be pointing to the node before the one to be removed\n        // then we update the next node of the slow pointer\n        slow->next = slow->next->next;\n        return head;\n    }\n};\n"))),(0,o.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode slow = head;\n        ListNode fast = head;\n        // move fast pointer to the n + 1 element\n        // now the distance between slow and fast pointer is n nodes\n        for (int i = 0; i < n; i++) fast = fast.next;\n        // if fast reached the end, we need to remove the first element\n        // e.g. head = [1], n = 1 \n        if (fast == null) return head.next;\n        // move both pointers at the same time until \n        // the fast pointer reaches the end\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        // slow pointer will be pointing to the node before the one to be removed\n        // then we update the next node of the slow pointer\n        slow.next = slow.next.next;\n        return head;\n    }\n}\n"))),(0,o.kt)(c,{value:"go",label:"Go",mdxType:"TabItem"},(0,o.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\n\n// the general idea is to use fast & slow pointers\n// 1. traverse L - n nodes from the start of the list using fast pointer\n// where L is the length of the linked list\n// e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n// 2. traverse slow pointer until fast pointer reaches the last node\n// e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n// 3. update slow next node\n// e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n// therefore, we have 1 -> 2 -> 3 -> 5 at the end\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    slow := head\n    fast := head\n    // move fast pointer to the n + 1 element\n    // now the distance between slow and fast pointer is n nodes\n    for i := 0; i < n; i++ {\n        fast = fast.Next\n    }\n    // if fast reached the end, we need to remove the first element\n    // e.g. head = [1], n = 1 \n    if fast == nil {\n        return head.Next\n    }\n    // move both pointers at the same time until \n    // the fast pointer reaches the end\n    for fast.Next != nil {\n        fast = fast.Next\n        slow = slow.Next\n    }\n    // slow pointer will be pointing to the node before to one to be removed\n    // then we update the next node of the slow pointer\n    slow.Next = slow.Next.Next\n    return head\n}\n"))),(0,o.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\n# Time Complexity: O(N) where N is the number of nodes\n# Space Complexity: O(1)\nclass Solution:\n    # the general idea is to use fast & slow pointers\n    # 1. traverse L - n nodes from the start of the list using fast pointer\n    # where L is the length of the linked list\n    # e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n    # 2. traverse slow pointer until fast pointer reaches the last node\n    # e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n    # 3. update slow next node\n    # e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n    # therefore, we have 1 -> 2 -> 3 -> 5 at the end\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        slow = fast = head\n        # move fast pointer to the n + 1 element\n        # now the distance between slow and fast pointer is n nodes\n        for i in range(n): fast = fast.next\n        # if fast reached the end, we need to remove the first element\n        # e.g. head = [1], n = 1 \n        if fast is None: return head.next\n        # move both pointers at the same time until the fast pointer reaches the end\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        # slow pointer will be pointing to the node before the one to be removed\n        # then we update the next node of the slow pointer\n        slow.next = slow.next.next\n        return head\n")))),(0,o.kt)("h2",{id:"approach-2-iteration-with-one-pass-solution"},"Approach 2: Iteration with One Pass Solution"),(0,o.kt)("p",null,"Decrement N and iterate fast and slow pointers, but only start slow pointer once N hit zero.."),(0,o.kt)("p",null,"As stated in Example 1: ",(0,o.kt)("inlineCode",{parentName:"p"},"1 -> 2 -> 3 -> 4 -> 5"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"n = 2")),(0,o.kt)("p",null,"Size of the linked list is ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"5")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"5")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"5"))))),", and remove 2nd Node (",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"4")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"4")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"4"))))),") from the last, so we need to stop at 3rd Node (",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"3")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"3"))))),") from first when we iterate. "),(0,o.kt)("p",null,"Iterate with fast pointer, till ",(0,o.kt)("inlineCode",{parentName:"p"},"N")," becomes ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"0")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"0"))))),", fast pointer move to 3rd Node (",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"3")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"3"))))),") then start with slow pointer."),(0,o.kt)("p",null,"Fast pointer is ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"2")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"2")))))," steps away to reach end (from the current 3rd Node (",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"3")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"3"))))),")). While we iterate till last node, fast pointer reach end at 5th node (",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mn",{parentName:"mrow"},"5")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"5")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,o.kt)("span",{parentName:"span",className:"mord"},"5"))))),") and eventually slow pointer stops at 3rd Node (3), finally change the pointer to the ",(0,o.kt)("strong",{parentName:"p"},"next next node"),", that's it."),(0,o.kt)("p",null,"Time Complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")"))))),", where ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"n")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - # of nodes in the list"),(0,o.kt)("p",null,"Space complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mn",{parentName:"mrow"},"1"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord"},"1"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)(N,{mdxType:"Tabs"},(0,o.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(k,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        // Dummy head pointer to return head reference at the last\n        ListNode current = new ListNode();\n        current.next = head;\n        // Initialize slow and fast pointer to dummy head\n        ListNode slow = current, fast = current;\n        while (fast.next != null) {\n            fast = fast.next;\n            if (n <= 0) {\n                slow = slow.next;\n            }\n            n -= 1;\n        }\n        slow.next = slow.next.next;\n        // Head reference\n        return current.next;\n    }\n}\n")))))}w.isMDXComponent=!0}}]);