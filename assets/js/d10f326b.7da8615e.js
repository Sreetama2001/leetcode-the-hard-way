"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[45666],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,f=u["".concat(s,".").concat(d)]||u[d]||l[d]||i;return t?a.createElement(f,o(o({ref:n},m),{},{components:t})):a.createElement(f,o({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},73552:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return u}});var a,r=t(87462),i=t(63366),o=(t(67294),t(3905)),p=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-performance-of-a-team/",tags:["Array","Greedy","Sorting","Heap (Priority Queue)"]},c="1383 - Maximum Performance of a Team (Hard)",m={unversionedId:"1300-1399/maximum-performance-of-a-team-hard",id:"1300-1399/maximum-performance-of-a-team-hard",title:"1383 - Maximum Performance of a Team (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-performance-of-a-team/",source:"@site/solutions/1300-1399/1383-maximum-performance-of-a-team-hard.md",sourceDirName:"1300-1399",slug:"/1300-1399/maximum-performance-of-a-team-hard",permalink:"/leetcode-the-hard-way/solutions/1300-1399/maximum-performance-of-a-team-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1383-maximum-performance-of-a-team-hard.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Greedy",permalink:"/leetcode-the-hard-way/solutions/tags/greedy"},{label:"Sorting",permalink:"/leetcode-the-hard-way/solutions/tags/sorting"},{label:"Heap (Priority Queue)",permalink:"/leetcode-the-hard-way/solutions/tags/heap-priority-queue"}],version:"current",sidebarPosition:1383,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-performance-of-a-team/",tags:["Array","Greedy","Sorting","Heap (Priority Queue)"]},sidebar:"tutorialSidebar",previous:{title:"1371 - Find the Longest Substring Containing Vowels in Even Counts (Medium)",permalink:"/leetcode-the-hard-way/solutions/1300-1399/find-the-longest-substring-containing-vowels-in-even-counts-medium"},next:{title:"1400 - 1499",permalink:"/leetcode-the-hard-way/solutions/category/1400---1499"}},l={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}],d=(a="SolutionAuthor",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),f={toc:u};function h(e){var n=e.components,t=(0,i.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1383---maximum-performance-of-a-team-hard"},"1383 - Maximum Performance of a Team (Hard)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given two integers ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," and two integer arrays ",(0,o.kt)("inlineCode",{parentName:"p"},"speed")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"efficiency")," both of length ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),". There are ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," engineers numbered from ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"speed[i]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"efficiency[i]")," represent the speed and efficiency of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ith")," engineer respectively."),(0,o.kt)("p",null,"Choose ",(0,o.kt)("strong",{parentName:"p"},"at most")," ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," different engineers out of the ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," engineers to form a team with the maximum ",(0,o.kt)("strong",{parentName:"p"},"performance"),"."),(0,o.kt)("p",null,"The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the maximum performance of this team"),". Since the answer can be a huge number, return it ",(0,o.kt)("strong",{parentName:"p"},"modulo")," ",(0,o.kt)("inlineCode",{parentName:"p"},"109 + 7"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\nOutput: 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\nOutput: 72\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= k <= n <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"speed.length == n")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"efficiency.length == n")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= speed[i] <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= efficiency[i] <= 10^8"))),(0,o.kt)("h2",{id:"approach-1-priority-queue"},"Approach 1: Priority Queue"),(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Time Complexity: O(N * (logN + logK)) \n// Space Complexity: O(N + K)\n// where N is the total number of candidates and K is the size of team\nclass Solution {\npublic:\n    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {\n        int MOD = 1e9 + 7;\n        vector<pair<int, int>> candidates(n);\n        // we build the pair { efficiency, speed } so that we can sort it later\n        for (int i = 0; i < n; i++) candidates[i] = { efficiency[i], speed[i] };\n        // sort candidates in descending order\n        sort(candidates.rbegin(), candidates.rend());\n        // Using Example 1: \n        // speed: [2, 10, 3, 1 ,5, 8] and efficiency: [5, 4, 3, 9, 7, 2]\n        // after sort, it becomes\n        // a: [{9, 1}, {7 ,5}, {5, 2}, {4, 10}, {3, 3}, {2, 8}]\n        long speedSum = 0, ans = 0;\n        // we use priority queue here with greater<int> to store the sum\n        // i.e min heap (the smallest element goes on the top)\n        priority_queue <int, vector<int>, greater<int>> pq;\n        // iterate each pair\n        for (auto& [e, s] : candidates) {\n            // put the speed to priority queue\n            pq.push(s);\n            // add to speedSum\n            speedSum += s;\n            // we only need to choose at most k engineers\n            // hence if the queue size is greater than k\n            // we need to remove a candidate\n            if (pq.size() > k) {\n                // who to remove? of course the one with smallest speed\n                speedSum -= pq.top();\n                pq.pop();\n            }\n            // calculate the performance\n            ans = max(ans, speedSum * e);\n        }\n        return ans % MOD;\n    }\n};\n")),(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        MOD = 10 ** 9 + 7\n        # build tuples ( efficiency, speed ) so that we can sort it later\n        candidates = zip(efficiency, speed)\n        # default sort mode is ascending. use `reverse = True` to sort in descending\n        candidates = sorted(candidates, key=lambda x: x[0], reverse=True)\n        # Using Example 1: \n        # speed: [2, 10, 3, 1 ,5, 8] and efficiency: [5, 4, 3, 9, 7, 2]\n        # after sort, it becomes\n        # candidates: [(9, 1), (7 ,5), (5, 2), (4, 10), (3, 3), (2, 8)]\n        speedSum, ans = 0, 0\n        # in python, it usually refers to heap \n        heap = []\n        # iterate each tuple\n        for e, s in candidates:\n            # put the speed to heap\n            heapq.heappush(heap, s)\n            # add to speedSum\n            speedSum += s\n            # we only need to choose at most k engineers\n            # hence if the queue size is greater than k\n            # we need to remove a candidate\n            if len(heap) > k:\n                # who to remove? of course the one with smallest speed\n                speedSum -= heapq.heappop(heap)\n            # calculate the performance\n            ans = max(ans, speedSum * e)\n        return ans % MOD\n")),(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},"// Logic Behind:\n// 1. Join Score and Efficiency\n//    We join both array since they are related, \n//    Which can be done either through maps or array. We are using array.\n// 2. Sorting Efficiency\n//    We are sorting the efficiency.\n//    Reason to sort with efficiency because we are multiply it single value.\n//    Since we are multiplying the minimum, we need to sort in descending order\n//    If we need a max we would sort in in ascending order.\n// 3. Heap of scoring\n//    Using heap here is curial since are need to add and remove all the smallest\n//    So low values are poped until we run the complete array to find the max performance.\n\nfunc maxPerformance(n int, speed []int, efficiency []int, k int) int {\n    // Since the answer can be huge, we are usingn 10**9 + 7 as it suggests.\n    MODULES := int(math.Pow(10, 9)) + 7;\n    \n    // Adding the spped and efficiency\n    // Since the number is same we don't have to check the length.\n    players := make([][]int, len(speed), len(speed))\n    for i, e := range speed {\n        players[i] = []int{e, efficiency[i]}\n    }\n    \n    // Sorting Players by Efficiency\n    sort.Sort(ByEfficiency(players))\n    \n    // Variables \n    sumOfSpeed := 0\n    maxPerformance := 0\n    \n    // Initialization of the speed heap.\n    speedHeap := &SpeedHeap{}\n    heap.Init(speedHeap)\n    for _, e := range players {\n        minEfficiency := e[1] // As it's the in descending order\n        sumOfSpeed = sumOfSpeed + e[0]\n        heap.Push(speedHeap, e[0])\n        if speedHeap.Len() > k{ // Here we pop the lowest when the length is reached.\n            sumOfSpeed = sumOfSpeed - heap.Pop(speedHeap).(int)\n        }\n        maxPerformance = max(maxPerformance, sumOfSpeed * minEfficiency)\n    }\n    return maxPerformance % MODULES;\n}\n\nfunc max(a,b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\n// Heap of speed\ntype SpeedHeap []int\nfunc (h SpeedHeap) Len() int           { return len(h) }\nfunc (h SpeedHeap) Less(i, j int) bool { return h[i] < h[j] }\nfunc (h SpeedHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *SpeedHeap) Push(x interface{}) {\n    *h = append(*h, x.(int))\n}\n\nfunc (h *SpeedHeap) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[0 : n-1]\n    return x\n}\n\n\n// Player Sorting\ntype ByEfficiency [][]int\nfunc (a ByEfficiency) Len() int           { return len(a) }\nfunc (a ByEfficiency) Less(i, j int) bool { \n    if(a[i][1] == a[j][1]){\n        return a[i][0] < a[j][0]\n    }\n    return a[i][1] > a[j][1] \n}\nfunc (a ByEfficiency) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\n")))}h.isMDXComponent=!0}}]);