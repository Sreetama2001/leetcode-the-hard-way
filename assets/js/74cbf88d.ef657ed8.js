"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[45766],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(n),d=a,g=s["".concat(m,".").concat(d)]||s[d]||c[d]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},66374:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return s}});var r,a=n(87462),i=n(63366),o=(n(67294),n(3905)),l=["components"],m={description:"Author: @wingkwong | https://leetcode.com/problems/rotate-image/",tags:["Array","Math","Matrix"]},p="0048 - Rotate Image (Medium)",u={unversionedId:"0000-0099/rotate-image-medium",id:"0000-0099/rotate-image-medium",title:"0048 - Rotate Image (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/rotate-image/",source:"@site/solutions/0000-0099/0048-rotate-image-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/rotate-image-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/rotate-image-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0048-rotate-image-medium.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Math",permalink:"/leetcode-the-hard-way/solutions/tags/math"},{label:"Matrix",permalink:"/leetcode-the-hard-way/solutions/tags/matrix"}],version:"current",sidebarPosition:48,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/rotate-image/",tags:["Array","Math","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"0046 - Permutations (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/permutations-medium"},next:{title:"0049 - Group Anagrams (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/group-anagrams-medium"}},c={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Rotate 4 Cells in a Round",id:"approach-1-rotate-4-cells-in-a-round",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),g={toc:s};function h(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0048---rotate-image-medium"},"0048 - Rotate Image (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/rotate-image/"},"https://leetcode.com/problems/rotate-image/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given an ",(0,o.kt)("inlineCode",{parentName:"p"},"n x n")," 2D ",(0,o.kt)("inlineCode",{parentName:"p"},"matrix")," representing an image, rotate the image by ",(0,o.kt)("strong",{parentName:"p"},"90")," degrees (clockwise)."),(0,o.kt)("p",null,"You have to rotate the image ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/In-place_algorithm"},(0,o.kt)("strong",{parentName:"a"},"in-place")),", which means you have to modify the input 2D matrix directly. ",(0,o.kt)("strong",{parentName:"p"},"DO NOT")," allocate another 2D matrix and do the rotation."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == matrix.length == matrix[i].length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= 20")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-1000 <= matrix[i][j] <= 1000"))),(0,o.kt)("h2",{id:"approach-1-rotate-4-cells-in-a-round"},"Approach 1: Rotate 4 Cells in a Round"),(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        // round 1: \n        // -------------------\n        // tmp <- 1\n        // top left cell matrix[i][j] (1) <- bottom left 7 cell (matrix[n - j - 1][i])\n        // bottom left 7 cell (matrix[n - j - 1][i]) <- bottom right cell 9 (matrix[n - i - 1][n - j - 1])\n        // bottom right cell 9 (matrix[n - i - 1][n - j - 1]) <- top right cell 3 (matrix[j][n - i - 1])\n        // top right cell 3 (matrix[j][n - i - 1]) <- 1 (tmp)\n\n        // 1 2 3    7 2 1\n        // 4 5 6 => 4 5 6\n        // 7 8 9    9 8 7\n\n        // // round 2:\n        // -------------------\n        // tmp <- 2\n        // 2 (matrix[i][j]) <- 4 (matrix[n - j - 1][i])\n        // 4 (matrix[n - j - 1][i]) <- 8 (matrix[n - i - 1][n - j - 1])\n        // 8 (matrix[n - i - 1][n - j - 1]) <- 6 (matrix[j][n - i - 1])\n        // 6 (matrix[j][n - i - 1]) <- 2 (tmp)\n\n        // 1 2 3    7 2 1    7 4 1\n        // 4 5 6 => 4 5 6 => 8 5 2\n        // 7 8 9    9 8 7    9 6 3\n        int n = matrix.size(), tmp;\n        for(int i = 0; i < n / 2; i++) {\n            for(int j = i; j < n - i - 1; j++) {\n                tmp = matrix[i][j];\n                matrix[i][j] = matrix[n - j - 1][i];\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n                matrix[j][n - i - 1] = tmp;\n            }\n        }\n            \n    }\n};\n\n")))}h.isMDXComponent=!0}}]);