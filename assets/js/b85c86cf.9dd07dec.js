"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[29327],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=o,m=d["".concat(u,".").concat(h)]||d[h]||c[h]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24499:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return d}});var r,o=n(87462),i=n(63366),a=(n(67294),n(3905)),l=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-pruning/",tags:["Tree","Depth-First Search","Binary Tree"]},s="0814 - Binary Tree Pruning (Medium)",p={unversionedId:"0800-0899/binary-tree-pruning-medium",id:"0800-0899/binary-tree-pruning-medium",title:"0814 - Binary Tree Pruning (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-pruning/",source:"@site/solutions/0800-0899/0814-binary-tree-pruning-medium.md",sourceDirName:"0800-0899",slug:"/0800-0899/binary-tree-pruning-medium",permalink:"/leetcode-the-hard-way/solutions/0800-0899/binary-tree-pruning-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0814-binary-tree-pruning-medium.md",tags:[{label:"Tree",permalink:"/leetcode-the-hard-way/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/leetcode-the-hard-way/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/leetcode-the-hard-way/solutions/tags/binary-tree"}],version:"current",sidebarPosition:814,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-pruning/",tags:["Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0800 - 0899",permalink:"/leetcode-the-hard-way/solutions/category/0800---0899"},next:{title:"0829 - Consecutive Numbers Sum (Hard)",permalink:"/leetcode-the-hard-way/solutions/0800-0899/consecutive-numbers-sum-hard"}},c={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],h=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),m={toc:d};function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0814---binary-tree-pruning-medium"},"0814 - Binary Tree Pruning (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return ",(0,a.kt)("em",{parentName:"p"},"the same tree where every subtree (of the given tree) not containing a"),(0,a.kt)("inlineCode",{parentName:"p"},"1"),(0,a.kt)("em",{parentName:"p"},"has been removed"),"."),(0,a.kt)("p",null,"A subtree of a node ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," plus every node that is a descendant of ",(0,a.kt)("inlineCode",{parentName:"p"},"node"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: root = [1,null,0,0,1]\nOutput: [1,null,0,null,1]\nExplanation: \nOnly the red nodes satisfy the property "every subtree not containing a 1".\nThe diagram on the right represents the answer.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,0,1,0,0,0,1]\nOutput: [1,null,1,null,1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,1,0,1,1,0,1,0]\nOutput: [1,1,0,1,1,null,1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 200]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Node.val")," is either ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,a.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Time Complexity: O(N) where N is the number of the nodes in the tree\n// Space Complexity: O(H) where H is the height of the tree. \n// In worse case, H can be N when it is a left skewed binary tree / right skewed binary tree\nclass Solution {\npublic:\n    // the idea is to use DFS to traverse the tree\n    // if the current subtree satifies one of the following conditions\n    // 1. root value is 1\n    // 2. left sub tree contains 1 \n    // 3. right sub tree contains 1\n    // then we return `root`\n    // otherwise, we return nullptr\n    TreeNode* pruneTree(TreeNode* root) {\n        // if root is nullptr, then return nullptr\n        if (!root) return nullptr;\n        // DFS on left sub tree\n        root->left = pruneTree(root->left);\n        // DFS on right sub tree\n        root->right = pruneTree(root->right);\n        // !root->left means the left sub tree doesn't contain 1\n        // !root->right means the right sub tree doesn't contain 1\n        // !root->val means the current node value is 0\n        // for this case, return nullptr\n        // else we can keep the node\n        return (!root->left && !root->right && !root->val) ? nullptr : root;\n    }\n};\n")),(0,a.kt)("p",null,"In case you want to free the deleted root to avoid memory leak. You can change the last line to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"if (!root->left && !root->right && !root->val) {\n    // delete will delete the memory of the pointer of root\n    delete root;\n    return nullptr;\n} else {\n    return root;\n}\n")),(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# Time Complexity: O(N) where N is the number of the nodes in the tree\n# Space Complexity: O(H) where H is the height of the tree. \n# In worse case, H can be N when it is a left skewed binary tree / right skewed binary tree\nclass Solution:\n    # the idea is to use DFS to traverse the tree\n    # if the current subtree satisfies one of the following conditions\n    # 1. root value is 1\n    # 2. left sub tree contains 1 \n    # 3. right sub tree contains 1\n    # then we return `root`\n    # otherwise, we return None\n    def pruneTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        # if root is None, then return None\n        if root is None: return None\n        # DFS on left sub tree\n        root.left = self.pruneTree(root.left)\n        # DFS on right sub tree\n        root.right = self.pruneTree(root.right)\n        # !root->left means the left sub tree doesn't contain 1\n        # !root->right means the right sub tree doesn't contain 1\n        # !root->val means the current node value is 0\n        # for this case, return None\n        # else we can keep the node\n        if root.left is None and root.right is None and root.val == 0: return None\n        return root\n")))}f.isMDXComponent=!0}}]);