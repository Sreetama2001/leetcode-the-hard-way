"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[28515],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),o=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=o(n),u=r,h=d["".concat(i,".").concat(u)]||d[u]||c[u]||s;return n?a.createElement(h,m(m({ref:t},p),{},{components:n})):a.createElement(h,m({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,m=new Array(s);m[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,m[1]=l;for(var o=2;o<s;o++)m[o]=n[o];return a.createElement.apply(null,m)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2413:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return c}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),m=["components"],l={description:"Author: @vigneshshiv | https://leetcode.com/problems/sort-list/"},i="0148 - Sort List (Medium)",o={unversionedId:"0100-0199/sort-list-medium",id:"0100-0199/sort-list-medium",title:"0148 - Sort List (Medium)",description:"Author: @vigneshshiv | https://leetcode.com/problems/sort-list/",source:"@site/solutions/0100-0199/0148-sort-list-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/sort-list-medium",permalink:"/leetcode-the-hard-way/solutions/0100-0199/sort-list-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0148-sort-list-medium.md",tags:[],version:"current",sidebarPosition:148,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/sort-list/"},sidebar:"tutorialSidebar",previous:{title:"0145 - Binary Tree Postorder Traversal (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/binary-tree-postorder-traversal-easy"},next:{title:"0155 - Min Stack (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/min-stack-easy"}},p={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Recursive Merge Sort",id:"approach-1-recursive-merge-sort",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)}},u=d("Tabs"),h=d("TabItem"),N=d("SolutionAuthor"),k={toc:c};function f(e){var t=e.components,n=(0,r.Z)(e,m);return(0,s.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"0148---sort-list-medium"},"0148 - Sort List (Medium)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-list/"},"https://leetcode.com/problems/sort-list/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"Given the ",(0,s.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, return ",(0,s.kt)("em",{parentName:"p"},"the list after sorting it in ",(0,s.kt)("strong",{parentName:"em"},"ascending order")),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg",alt:null})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: head = [4,2,1,3]\nOutput: [1,2,3,4]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg",alt:null})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 3:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: head = []\nOutput: []\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ",(0,s.kt)("inlineCode",{parentName:"li"},"[0, 5 * 10^4]"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Follow up:")," Can you sort the linked list in ",(0,s.kt)("inlineCode",{parentName:"p"},"O(n logn)")," time and ",(0,s.kt)("inlineCode",{parentName:"p"},"O(1)")," memory (i.e. constant space)?"),(0,s.kt)("h2",{id:"approach-1-recursive-merge-sort"},"Approach 1: Recursive Merge Sort"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Find the middle node and cut the head reference till middle node"),(0,s.kt)("li",{parentName:"ul"},"Keep reducing the nodes size to smaller for comparison (same as like merge sort)"),(0,s.kt)("li",{parentName:"ul"},"Once we reduce nodes size to 1, merge the nodes in sorted (ascending) order."),(0,s.kt)("li",{parentName:"ul"},"Keep merging the nodes till last, to build the sorted list.")),(0,s.kt)("p",null,"Time Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n log(n))")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"))"))))),", where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - # of nodes in the list"),(0,s.kt)("p",null,"Space complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),", ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - recursive call stack"),(0,s.kt)(u,{mdxType:"Tabs"},(0,s.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(N,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\n            return head;\n        }\n        // Middle node\n        ListNode mid = middleNode(head);\n        // Keep traversing left to get the smallest nodes for comparison (smallest we can get is 1 node)\n        ListNode left = sortList(head);\n        // Starting from middle, to find the smallest nodes for comparison\n        ListNode right = sortList(mid);\n        // Compare the list and return the merged nodes\n        return mergeTwoLists(left, right);\n    }\n    \n    public ListNode middleNode(ListNode head) {\n        ListNode midPrev = null;\n        //\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        // Cut the reference to the next pointer (mid), so that head remains from start to mid.\n        midPrev.next = null;\n        return mid;\n    }\n    \n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Base case\n        if (Objects.isNull(list1) && Objects.isNull(list2)) {\n            return list1;\n        }\n        if (Objects.isNull(list1)) {\n            return list2;\n        }\n        if (Objects.isNull(list2)) {\n            return list1;\n        }\n        ListNode head = new ListNode();\n        ListNode node = head;\n        while (Objects.nonNull(list1) && Objects.nonNull(list2)) {\n            if (list1.val <= list2.val) {\n                node.next = list1;\n                list1 = list1.next;\n            } else {\n                node.next = list2;\n                list2 = list2.next;\n            }\n            node = node.next;\n        }\n        // If either of half is not empty then append it\n        node.next = Objects.nonNull(list1) ? list1 : list2;\n        return head.next;\n    }\n}\n")))))}f.isMDXComponent=!0}}]);