"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[45535],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76647:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r,o=t(87462),a=t(63366),i=(t(67294),t(3905)),l=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/largest-component-size-by-common-factor"},p="0952 - Largest Component Size by Common Factor (Hard)",c={unversionedId:"0900-0999/largest-component-size-by-common-factor-hard",id:"0900-0999/largest-component-size-by-common-factor-hard",title:"0952 - Largest Component Size by Common Factor (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/largest-component-size-by-common-factor",source:"@site/solutions/0900-0999/0952-largest-component-size-by-common-factor-hard.md",sourceDirName:"0900-0999",slug:"/0900-0999/largest-component-size-by-common-factor-hard",permalink:"/leetcode-the-hard-way/solutions/0900-0999/largest-component-size-by-common-factor-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0952-largest-component-size-by-common-factor-hard.md",tags:[],version:"current",sidebarPosition:952,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/largest-component-size-by-common-factor"},sidebar:"tutorialSidebar",previous:{title:"0948 - Bag of Tokens (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/bag-of-tokens-medium"},next:{title:"0967 - Numbers With Same Consecutive Differences (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/numbers-with-same-consecutive-differences-medium"}},u={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Factorisation + DSU",id:"approach-1-factorisation--dsu",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),f={toc:m};function k(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0952---largest-component-size-by-common-factor-hard"},"0952 - Largest Component Size by Common Factor (Hard)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/largest-component-size-by-common-factor"},"https://leetcode.com/problems/largest-component-size-by-common-factor")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an integer array of unique positive integers ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),". Consider the following graph:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"There are ",(0,i.kt)("inlineCode",{parentName:"li"},"nums.length")," nodes, labeled ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[0]")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[nums.length - 1]"),","),(0,i.kt)("li",{parentName:"ul"},"There is an undirected edge between ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[i]")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[j]")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[i]")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[j]")," share a common factor greater than ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the size of the largest connected component in the graph"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/01/ex1.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [4,6,15,35]\nOutput: 4\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/01/ex2.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [20,50,9,63]\nOutput: 2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/01/ex3.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [2,3,6,7,4,12,21,39]\nOutput: 8\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 2 * 104")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 105")),(0,i.kt)("li",{parentName:"ul"},"All the values of ",(0,i.kt)("inlineCode",{parentName:"li"},"nums")," are ",(0,i.kt)("strong",{parentName:"li"},"unique"),".")),(0,i.kt)("h2",{id:"approach-1-factorisation--dsu"},"Approach 1: Factorisation + DSU"),(0,i.kt)("p",null,"We iterate each number and factorise it. In general, here's the approach."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> factorize(int x) {\n    vector<int> res;\n    for (int y = 2; y * y <= x; y++) {\n        if (x % y) continue;\n        while(x % y == 0) {\n            res.push_back(y);\n            x /= y;\n        }\n    }\n    if (x > 1) res.push_back(x);\n    return res;\n}\n")),(0,i.kt)("p",null,"Once we got the factors, we use DSU to unite each factor and the number."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"DSU Template"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class dsu {\n public:\n  vector<int> root, rank, size;\n  int n;\n  int cnt;\n\n  dsu(int _n) : n(_n) {\n    root.resize(n);\n    rank.resize(n);\n    size.resize(n);\n    for(int i = 0; i < n; i++) {\n        root[i] = i;\n        rank[i] = 1;\n        size[i] = 1;\n    }\n    cnt = n;\n  }\n\n  inline int getCount() { return cnt; }\n\n  inline int get(int x) { return (x == root[x] ? x : (root[x] = get(root[x]))); }\n\n  inline bool unite(int x, int y) {\n    x = get(x); y = get(y);\n    if (x != y) {\n        if (rank[x] > rank[y]) {\n            root[y] = x;\n        } else if (rank[x] < rank[y]) {\n            root[x] = y;\n        } else {\n            root[y] = x;\n            rank[x] += 1;\n        }\n        cnt--;\n        \n      return true;\n    }\n    return false;\n  }\n};\n"))),(0,i.kt)("p",null,"At the end, we check the size of each group and return the max one."),(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int largestComponentSize(vector<int>& nums) {\n        int n = nums.size();\n        dsu d(100005);\n        for (auto x : nums) {\n            // step 1: factorize each number\n            vector<int> f = factorize(x);\n            // step 2: unite each number with its factors\n            for (int i = 0; i < f.size(); i++) {\n                d.unite(x, f[i]);\n            }\n        }\n        // step 3: find out the max group size\n        int ans = 0;\n        unordered_map<int, int> m;\n        for (auto x : nums) {\n            ans = max(ans, ++m[d.get(x)]);\n        }\n        return ans;\n    }\n")))}k.isMDXComponent=!0}}]);