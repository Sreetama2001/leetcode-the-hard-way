"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[92590],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=u(n),m=o,d=f["".concat(p,".").concat(m)]||f[m]||c[m]||a;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},63338:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return f}});var r,o=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/power-of-four/",tags:["Math","Bit Manipulation","Recursion"]},u="0342 - Power of Four (Easy)",s={unversionedId:"0300-0399/power-of-four-easy",id:"0300-0399/power-of-four-easy",title:"0342 - Power of Four (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/power-of-four/",source:"@site/solutions/0300-0399/0342-power-of-four-easy.md",sourceDirName:"0300-0399",slug:"/0300-0399/power-of-four-easy",permalink:"/leetcode-the-hard-way/solutions/0300-0399/power-of-four-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0342-power-of-four-easy.md",tags:[{label:"Math",permalink:"/leetcode-the-hard-way/solutions/tags/math"},{label:"Bit Manipulation",permalink:"/leetcode-the-hard-way/solutions/tags/bit-manipulation"},{label:"Recursion",permalink:"/leetcode-the-hard-way/solutions/tags/recursion"}],version:"current",sidebarPosition:342,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/power-of-four/",tags:["Math","Bit Manipulation","Recursion"]},sidebar:"tutorialSidebar",previous:{title:"0338 - Counting Bits (Easy)",permalink:"/leetcode-the-hard-way/solutions/0300-0399/counting-bits-easy"},next:{title:"0344 - Reverse String (Easy)",permalink:"/leetcode-the-hard-way/solutions/0300-0399/reverse-string-easy"}},c={},f=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2},{value:"Approach 2: Bit Manipulation",id:"approach-2-bit-manipulation",level:2}],m=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),d={toc:f};function h(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0342---power-of-four-easy"},"0342 - Power of Four (Easy)"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,i.kt)("em",{parentName:"p"},"true if it is a power of four. Otherwise, return false"),"."),(0,i.kt)("p",null,"An integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," is a power of four, if there exists an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," such that ",(0,i.kt)("inlineCode",{parentName:"p"},"n == 4x"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: n = 16\nOutput: true\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: n = 5\nOutput: false\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: n = 1\nOutput: true\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-2^31 <= n <= 2^31 - 1"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Follow up:")," Could you solve it without loops/recursion?"),(0,i.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,i.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isPowerOfFour(int n) {\n        // the idea is to use binary search to find x to see if 4 ^ x = n is true or false\n        int l = 0, r = (int) log(pow(2, 31)) / log(4);\n         while (l < r) {\n            // get the middle one\n            // for even number of elements, take the lower one\n            int m = l + (r - l) / 2;\n            // exclude m\n            if (pow(4, m) < n) l = m + 1;\n            // include m\n            else r = m;\n        }\n        // check if 4 ^ l is n\n        // if so, then n is a power of four, otherwise it is not\n        return pow(4, l) == n;\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-2-bit-manipulation"},"Approach 2: Bit Manipulation"),(0,i.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isPowerOfFour(int num) {\n        // 4: 100\n        // 16: 10000\n        // observation: \n        // count of 1s is 1 and the number of trailing zeros is even\n        return __builtin_popcount(num) == 1 && // only 1 bit is set\n              (__builtin_ctz(num) & 1) == 0;     // with even trailing zeros \n    }\n};\n")))}h.isMDXComponent=!0}}]);