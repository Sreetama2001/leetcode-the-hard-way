"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[92045],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},33127:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/valid-anagram/",tags:["Hash Map"]},s="0242 - Valid Anagram (Easy)",p={unversionedId:"0200-0299/valid-anagram-easy",id:"0200-0299/valid-anagram-easy",title:"0242 - Valid Anagram (Easy)",description:"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/valid-anagram/",source:"@site/solutions/0200-0299/0242-valid-anagram-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/valid-anagram-easy",permalink:"/leetcode-the-hard-way/solutions/0200-0299/valid-anagram-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0242-valid-anagram-easy.md",tags:[{label:"Hash Map",permalink:"/leetcode-the-hard-way/solutions/tags/hash-map"}],version:"current",sidebarPosition:242,frontMatter:{description:"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/valid-anagram/",tags:["Hash Map"]},sidebar:"tutorialSidebar",previous:{title:"0234 - Palindrome Linked List (Easy)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/palindrome-linked-list-easy"},next:{title:"0246 - Strobogrammatic Number (Easy)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/strobogrammatic-number-easy"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sort",id:"approach-1-sort",level:2},{value:"Approach 2: Hash Map",id:"approach-2-hash-map",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=m("Tabs"),h=m("TabItem"),g=m("SolutionAuthor"),f={toc:u};function y(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0242---valid-anagram-easy"},"0242 - Valid Anagram (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-anagram/"},"https://leetcode.com/problems/valid-anagram/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given two strings ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"t"),", return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," ",(0,o.kt)("em",{parentName:"p"},"if")," ",(0,o.kt)("inlineCode",{parentName:"p"},"t")," ",(0,o.kt)("em",{parentName:"p"},"is an anagram of")," ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),(0,o.kt)("em",{parentName:"p"},", and")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," ",(0,o.kt)("em",{parentName:"p"},"otherwise"),"."),(0,o.kt)("p",null,"An ",(0,o.kt)("strong",{parentName:"p"},"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "anagram", t = "nagaram"\nOutput: true\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "rat", t = "car"\nOutput: false\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= s.length, t.length <= 5 * 104")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"t")," consist of lowercase English letters.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Follow up:")," What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"),(0,o.kt)("h2",{id:"approach-1-sort"},"Approach 1: Sort"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        // s and t are anagrams\n        // if they are same after being sorted\n        sort(begin(s), end(s));\n        sort(begin(t), end(t));\n        return s == t;\n    }\n};\n"))),(0,o.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(g,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isAnagram(String s, String t) {\n        char[] s_chars = s.toCharArray();\n        char[] t_chars = t.toCharArray();\n        // Sorting with char array\n        Arrays.sort(s_chars);\n        Arrays.sort(t_chars);\n        // Convert to string\n        s = new String(s_chars);\n        t = new String(t_chars);\n        return s.equals(t);\n    }\n}\n")))),(0,o.kt)("h2",{id:"approach-2-hash-map"},"Approach 2: Hash Map"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        // if s and t are anagram, \n        // then the frequency of each number would be same\n        int cnt[26] = {0};\n        for (auto x : s) cnt[x - 'a']++;\n        for (auto x : t) cnt[x - 'a']--;\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n"))),(0,o.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(g,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isAnagram(String s, String t) {\n        int[] chars = new int[26];\n        for (char c : s.toCharArray()) {\n            chars[c - 'a']++;\n        }\n        for (char c : t.toCharArray()) {\n            chars[c - 'a']--;\n            // If any char is occurred more than \"s string\" char, then immediately return false. \n            if (chars[c - 'a'] < 0) return false;\n        }\n        for (int num : chars) {\n            if (num != 0) return false;\n        }\n        return true;\n    }\n}\n")))))}y.isMDXComponent=!0}}]);