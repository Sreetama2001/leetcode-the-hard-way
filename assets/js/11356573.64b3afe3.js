"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[44294],{3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return y}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},d=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),y=a,h=c["".concat(s,".").concat(y)]||c[y]||u[y]||o;return t?n.createElement(h,l(l({ref:r},d),{},{components:t})):n.createElement(h,l({ref:r},d))}));function y(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},60811:function(e,r,t){t.r(r),t.d(r,{assets:function(){return d},contentTitle:function(){return s},default:function(){return v},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var n=t(87462),a=t(63366),o=(t(67294),t(3905)),l=["components"],i={description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/binary-tree-preorder-traversal/",tags:["Stack","Tree","Depth-First Search","Binary Tree"]},s="0144 - Binary Tree Preorder Traversal (Easy)",p={unversionedId:"0100-0199/binary-tree-preorder-traversal-easy",id:"0100-0199/binary-tree-preorder-traversal-easy",title:"0144 - Binary Tree Preorder Traversal (Easy)",description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/binary-tree-preorder-traversal/",source:"@site/solutions/0100-0199/0144-binary-tree-preorder-traversal-easy.md",sourceDirName:"0100-0199",slug:"/0100-0199/binary-tree-preorder-traversal-easy",permalink:"/leetcode-the-hard-way/solutions/0100-0199/binary-tree-preorder-traversal-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0144-binary-tree-preorder-traversal-easy.md",tags:[{label:"Stack",permalink:"/leetcode-the-hard-way/solutions/tags/stack"},{label:"Tree",permalink:"/leetcode-the-hard-way/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/leetcode-the-hard-way/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/leetcode-the-hard-way/solutions/tags/binary-tree"}],version:"current",sidebarPosition:144,frontMatter:{description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/binary-tree-preorder-traversal/",tags:["Stack","Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0141 - Linked List Cycle (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/linked-list-cycle"},next:{title:"0145 - Binary Tree Postorder Traversal (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/binary-tree-postorder-traversal-easy"}},d={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS - Pre-order traversal",id:"approach-1-dfs---pre-order-traversal",level:2}],c=function(e){return function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",r)}},y=c("Tabs"),h=c("TabItem"),m=c("SolutionAuthor"),f={toc:u};function v(e){var r=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0144---binary-tree-preorder-traversal-easy"},"0144 - Binary Tree Preorder Traversal (Easy)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return ",(0,o.kt)("em",{parentName:"p"},"the preorder traversal of its nodes' values"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,null,2,3]\nOutput: [1,2,3]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = []\nOutput: []\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1]\nOutput: [1]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[0, 100]"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-100 <= Node.val <= 100"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Follow up:")," Recursive solution is trivial, could you do it iteratively?"),(0,o.kt)("h2",{id:"approach-1-dfs---pre-order-traversal"},"Approach 1: DFS - Pre-order traversal"),(0,o.kt)(y,{mdxType:"Tabs"},(0,o.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// Time Complexity: O(N)\n// Space Complexity: O(N)\n\n// This is a standard pre-order traversal problem, I'd suggest to learn in-order and post-order as well.\n// Here's a short tutorial if you're interested.\n// https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n// then you may try the following problems \n// 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n// 145. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-postorder-traversal/\n\nclass Solution {\npublic:\n    vector<int> ans;\n    void preorder(TreeNode* node) {\n        if (node == NULL) return;\n        // do something with node value here\n        ans.push_back(node->val);\n        // traverse the left node\n        preorder(node->left);\n        // traverse the right node\n        preorder(node->right);\n    }\n    \n    vector<int> preorderTraversal(TreeNode* root) {\n        preorder(root);\n        return ans;\n    }\n};\n"))),(0,o.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# This is a standard pre-order traversal problem, I'd suggest to learn in-order and post-order as well.\n# Here's a short tutorial if you're interested.\n# https://wingkwong.github.io/leetcode-the-hard-way/tutorials/graph-theory/binary-tree\n# then you may try the following problems \n# 94. Binary Tree Inorder Traversal: https://leetcode.com/problems/binary-tree-inorder-traversal/\n# 145. Binary Tree Postorder Traversal: https://leetcode.com/problems/binary-tree-postorder-traversal/\n\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        # root -> left  -> right\n        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right) if root else []\n"))),(0,o.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(m,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public static List<Integer> preorder(TreeNode root, List<Integer> ll) {\n        if (root == null) {\n            return ll;\n        }\n        ll.add(root.val);\n        preorder(root.left, ll);\n        preorder(root.right, ll);\n        return ll;\n    }\n   public static List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> ll = new LinkedList<Integer>();\n        ll = preorder(root, ll);\n        return ll;\n    }\n}\n")))))}v.isMDXComponent=!0}}]);