"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[13406],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=n.createContext({}),c=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(r),d=a,h=s["".concat(m,".").concat(d)]||s[d]||u[d]||i;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=s;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},73291:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return m},default:function(){return k},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],l={description:"Author: @wingkwong, @ganajayant| https://leetcode.com/problems/search-a-2d-matrix/",tags:["Array","Binary Search","Matrix"]},m="0074 - Search a 2D Matrix (Medium)",c={unversionedId:"0000-0099/search-a-2d-matrix-medium",id:"0000-0099/search-a-2d-matrix-medium",title:"0074 - Search a 2D Matrix (Medium)",description:"Author: @wingkwong, @ganajayant| https://leetcode.com/problems/search-a-2d-matrix/",source:"@site/solutions/0000-0099/0074-search-a-2d-matrix-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/search-a-2d-matrix-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/search-a-2d-matrix-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0074-search-a-2d-matrix-medium.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Binary Search",permalink:"/leetcode-the-hard-way/solutions/tags/binary-search"},{label:"Matrix",permalink:"/leetcode-the-hard-way/solutions/tags/matrix"}],version:"current",sidebarPosition:74,frontMatter:{description:"Author: @wingkwong, @ganajayant| https://leetcode.com/problems/search-a-2d-matrix/",tags:["Array","Binary Search","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"0072 - Edit Distance (Hard)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/edit-distance-hard"},next:{title:"0075 - Sort Colors (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/sort-colors-medium"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Searching Row &amp; Column",id:"approach-1-searching-row--column",level:2},{value:"Approach 2: Binary Search",id:"approach-2-binary-search",level:2}],s=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},d=s("Tabs"),h=s("TabItem"),g=s("SolutionAuthor"),f={toc:u};function k(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0074---search-a-2d-matrix-medium"},"0074 - Search a 2D Matrix (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-a-2d-matrix/"},"https://leetcode.com/problems/search-a-2d-matrix/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Write an efficient algorithm that searches for a value ",(0,i.kt)("inlineCode",{parentName:"p"},"target")," in an ",(0,i.kt)("inlineCode",{parentName:"p"},"m x n")," integer matrix ",(0,i.kt)("inlineCode",{parentName:"p"},"matrix"),". This matrix has the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Integers in each row are sorted from left to right."),(0,i.kt)("li",{parentName:"ul"},"The first integer of each row is greater than the last integer of the previous row.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"m == matrix.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == matrix[i].length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-104 <= matrix[i][j], target <= 104"))),(0,i.kt)("h2",{id:"approach-1-searching-row--column"},"Approach 1: Searching Row & Column"),(0,i.kt)(d,{mdxType:"Tabs"},(0,i.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        int n = matrix.size(), m = matrix[0].size(), j = 0;\n        // search for the target row\n        for (int i = 0; i < n; i++) {\n            // if the target is within [matrix[i][0], matrix[i][m - 1]],\n            // the target is possible in row i\n            if (target >= matrix[i][0] && target <= matrix[i][m - 1]) {\n                j = i;\n                break;\n            }\n        }\n        // iterate each column on row j\n        for (int i = 0; i < m; i++) {\n            // check if target exists\n            if (matrix[j][i] == target) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n")))),(0,i.kt)("h2",{id:"approach-2-binary-search"},"Approach 2: Binary Search"),(0,i.kt)("p",null,"Find which row and coloumn the element belongs to by using Binary Search"),(0,i.kt)(d,{mdxType:"Tabs"},(0,i.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(g,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        for (int i = 0; i < matrix.length; i++) {\n            int low = 0;\n            int high = matrix[i].length - 1;\n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (matrix[i][mid] == target) {\n                    return true;\n                } else if (matrix[i][mid] > target) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return false;\n    }\n}\n")))))}k.isMDXComponent=!0}}]);