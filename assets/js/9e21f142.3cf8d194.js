"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[86661],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=i,v=c["".concat(p,".").concat(d)]||c[d]||s[d]||o;return n?r.createElement(v,a(a({ref:t},m),{},{components:n})):r.createElement(v,a({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},42015:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return c}});var r,i=n(87462),o=n(63366),a=(n(67294),n(3905)),l=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/"},u="2406 - Divide Intervals Into Minimum Number of Groups (Medium)",m={unversionedId:"2400-2499/divide-intervals-into-minimum-number-of-groups-medium",id:"2400-2499/divide-intervals-into-minimum-number-of-groups-medium",title:"2406 - Divide Intervals Into Minimum Number of Groups (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/",source:"@site/solutions/2400-2499/2406-divide-intervals-into-minimum-number-of-groups-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/divide-intervals-into-minimum-number-of-groups-medium",permalink:"/leetcode-the-hard-way/solutions/2400-2499/divide-intervals-into-minimum-number-of-groups-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2406-divide-intervals-into-minimum-number-of-groups-medium.md",tags:[],version:"current",sidebarPosition:2406,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/"},sidebar:"tutorialSidebar",previous:{title:"2405 - Optimal Partition of String (Medium)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/optimal-partition-of-string-medium"},next:{title:"2418 - Sort the People (Easy)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/sort-the-people-easy"}},s={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Line Sweep",id:"approach-1-line-sweep",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),v={toc:c};function f(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2406---divide-intervals-into-minimum-number-of-groups-medium"},"2406 - Divide Intervals Into Minimum Number of Groups (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a 2D integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"intervals")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"intervals[i] = [lefti, righti]")," represents the ",(0,a.kt)("strong",{parentName:"p"},"inclusive")," interval ",(0,a.kt)("inlineCode",{parentName:"p"},"[lefti, righti]"),"."),(0,a.kt)("p",null,"You have to divide the intervals into one or more ",(0,a.kt)("strong",{parentName:"p"},"groups")," such that each interval is in ",(0,a.kt)("strong",{parentName:"p"},"exactly")," one group, and no two intervals that are in the same group ",(0,a.kt)("strong",{parentName:"p"},"intersect")," each other."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"minimum")," number of groups you need to make"),"."),(0,a.kt)("p",null,"Two intervals ",(0,a.kt)("strong",{parentName:"p"},"intersect")," if there is at least one common number between them. For example, the intervals ",(0,a.kt)("inlineCode",{parentName:"p"},"[1, 5]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"[5, 8]")," intersect."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\nOutput: 3\nExplanation: We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: intervals = [[1,3],[5,6],[8,10],[11,13]]\nOutput: 1\nExplanation: None of the intervals overlap, so we can put all of them in one group.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= intervals.length <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"intervals[i].length == 2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= lefti <= righti <= 106"))),(0,a.kt)("h2",{id:"approach-1-line-sweep"},"Approach 1: Line Sweep"),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // it's almost same as 253. Meeting Rooms II ...\n    // the idea is to use line sweep to find out the number of overlapped intervals\n    // if it is overlapped, that means you need to create a new group\n    // e.g. if 2 intervals are overlapped, you need 2 groups ...\n    // e.g. if 3 intervals are overlapped, you need 3 groups ...\n    int minGroups(vector<vector<int>>& intervals) {\n        int ans = 0, cnt = 0;\n        // use map for internally sorting\n        map<int, int> m;\n        // standard line sweep\n        // - increase the count of starting point by 1\n        // - decrease the count of ending point by 1\n        // - take prefix sum and do something\n        for (auto& x: intervals) {\n            // in - increase by 1\n            m[x[0]]++;\n            // out - decrease by 1\n            m[x[1] + 1]--;\n        }\n        // so now what we have is\n        // intervals   1  2  3  4  5  6  7  8  9  10\n        // +           2  1  0  0  1  1  0  0  0  0 \n        // -           0  0  1  0  1  0  0  1  0  2\n        // m           2  1  -1 0  0  1  0  -1 0  -2\n        for (auto& x: m) {\n            // here we calculate the prefix sum\n            cnt += x.second;\n            // and record the maximum overlapping intervals\n            ans = max(ans, cnt);\n        }\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);