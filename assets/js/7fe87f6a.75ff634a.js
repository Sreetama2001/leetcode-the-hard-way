"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[69395],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return c}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(t),c=i,v=d["".concat(o,".").concat(c)]||d[c]||p[c]||a;return t?r.createElement(v,u(u({ref:n},m),{},{components:t})):r.createElement(v,u({ref:n},m))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,u=new Array(a);u[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,u[1]=s;for(var l=2;l<a;l++)u[l]=t[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},23576:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),u=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-even-numbers-after-queries/",tags:["Array","Simulation"]},o="0985 - Sum of Even Numbers After Queries (Medium)",l={unversionedId:"0900-0999/sum-of-even-numbers-after-queries.medium",id:"0900-0999/sum-of-even-numbers-after-queries.medium",title:"0985 - Sum of Even Numbers After Queries (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-even-numbers-after-queries/",source:"@site/solutions/0900-0999/0985-sum-of-even-numbers-after-queries.medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/sum-of-even-numbers-after-queries.medium",permalink:"/leetcode-the-hard-way/solutions/0900-0999/sum-of-even-numbers-after-queries.medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0985-sum-of-even-numbers-after-queries.medium.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Simulation",permalink:"/leetcode-the-hard-way/solutions/tags/simulation"}],version:"current",sidebarPosition:985,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-even-numbers-after-queries/",tags:["Array","Simulation"]},sidebar:"tutorialSidebar",previous:{title:"0981 - Time Based Key-Value Store (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/time-based-key-value-store-medium"},next:{title:"0987 - Vertical Order Traversal of a Binary Tree (Hard)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/vertical-order-traversal-of-a-binary-tree-hard"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation",id:"approach-1-simulation",level:2},{value:"Approach 2: Segment Tree",id:"approach-2-segment-tree",level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}},c=d("Tabs"),v=d("TabItem"),f=d("SolutionAuthor"),h={toc:p};function g(e){var n=e.components,t=(0,i.Z)(e,u);return(0,a.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0985---sum-of-even-numbers-after-queries-medium"},"0985 - Sum of Even Numbers After Queries (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sum-of-even-numbers-after-queries/"},"https://leetcode.com/problems/sum-of-even-numbers-after-queries/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an array ",(0,a.kt)("inlineCode",{parentName:"p"},"queries")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"queries[i] = [vali, indexi]"),"."),(0,a.kt)("p",null,"For each query ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),", first, apply ",(0,a.kt)("inlineCode",{parentName:"p"},"nums[indexi] = nums[indexi] + vali"),", then print the sum of the even values of ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"an integer array"),(0,a.kt)("inlineCode",{parentName:"p"},"answer"),(0,a.kt)("em",{parentName:"p"},"where"),(0,a.kt)("inlineCode",{parentName:"p"},"answer[i]"),(0,a.kt)("em",{parentName:"p"},"is the answer to the"),(0,a.kt)("inlineCode",{parentName:"p"},"ith"),(0,a.kt)("em",{parentName:"p"},"query"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\nOutput: [8,6,2,4]\nExplanation: At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1], queries = [[4,0]]\nOutput: [0]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 104")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-104 <= nums[i] <= 104")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= queries.length <= 104")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-104 <= vali <= 104")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= indexi < nums.length"))),(0,a.kt)("h2",{id:"approach-1-simulation"},"Approach 1: Simulation"),(0,a.kt)(c,{mdxType:"Tabs"},(0,a.kt)(v,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // the idea is we don't calculate the even sum from scratch for each query\n    // instead, we calculate it at the beginning\n    // since each query only updates one value, \n    // so we can adjust the even sum base on the original value and new value\n    vector<int> sumEvenAfterQueries(vector<int>& nums, vector<vector<int>>& queries) {\n        int evenSum = 0;\n        // calculate the sum of all even numbers\n        for (auto x : nums) {\n            if (x % 2 == 0) {\n                evenSum += x;\n            }\n        }\n        vector<int> ans;\n        for (auto q : queries) {\n            int val = q[0], idx = q[1];\n            // if original nums[idx] is even, then we deduct it from evenSum\n            if (nums[idx] % 2 == 0) evenSum -= nums[idx];\n            // in-place update nums\n            nums[idx] += val;\n            // check if we need to update evenSum for the new value\n            if (nums[idx] % 2 == 0) evenSum += nums[idx];\n            // then we have evenSum after this query, push it to ans \n            ans.push_back(evenSum);\n        }\n        return ans;\n    }\n};\n"))),(0,a.kt)(v,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    # the idea is we don't calculate the even sum from scratch for each query\n    # instead, we calculate it at the beginning\n    # since each query only updates one value, \n    # so we can adjust the even sum base on the original value and new value\n    def sumEvenAfterQueries(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        # calculate the sum of all even numbers\n        evenSum = sum(x for x in nums if x % 2 == 0)\n        ans = []\n        for val, idx in queries:\n            # if original nums[idx] is even, then we deduct it from evenSum\n            if nums[idx] % 2 == 0: evenSum -= nums[idx]\n            # in-place update nums\n            nums[idx] += val\n            # check if we need to update evenSum for the new value\n            if nums[idx] % 2 == 0: evenSum += nums[idx]\n            # then we have evenSum after this query, push it to ans \n            ans.append(evenSum)\n        return ans\n"))),(0,a.kt)(v,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    // the idea is we don't calculate the even sum from scratch for each query\n    // instead, we calculate it at the beginning\n    // since each query only updates one value, \n    // so we can adjust the even sum base on the original value and new value\n    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {\n        int evenSum = 0, n = queries.length;\n        // calculate the sum of all even numbers\n        for (int x : nums) {\n            if (x % 2 == 0) {\n                evenSum += x;\n            }\n        }\n        int[] ans = new int[n];\n        for (int i = 0; i < n; i++) {\n            int val = queries[i][0], idx = queries[i][1];\n            // if original nums[idx] is even, then we deduct it from evenSum\n            if (nums[idx] % 2 == 0) evenSum -= nums[idx];\n            // in-place update nums\n            nums[idx] += val;\n            // check if we need to update evenSum for the new value\n            if (nums[idx] % 2 == 0) evenSum += nums[idx];\n            // then we have evenSum after this query, push it to ans \n            ans[i] = evenSum;\n        }\n        return ans;\n    }\n}\n"))),(0,a.kt)(v,{value:"go",label:"Go",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// the idea is we don't calculate the even sum from scratch for each query\n// instead, we calculate it at the beginning\n// since each query only updates one value, \n// so we can adjust the even sum base on the original value and new value\nfunc sumEvenAfterQueries(nums []int, queries [][]int) []int {\n    evenSum := 0\n    // calculate the sum of all even numbers\n    for _, val := range nums {\n        if val % 2 == 0 {\n            evenSum += val\n        }\n    }\n    ans := make([]int, len(queries))\n    for i, q := range queries {\n        val, idx := q[0], q[1]\n        // if original nums[idx] is even, then we deduct it from evenSum\n        if nums[idx] % 2 == 0 {\n            evenSum -= nums[idx]\n        }\n        // in-place update nums\n        nums[idx] += val\n        // check if we need to update evenSum for the new value\n        if nums[idx] % 2 == 0 {\n            evenSum += nums[idx]\n        }\n        // then we have evenSum after this query, push it to ans \n        ans[i] = evenSum\n    }\n    return ans\n}\n")))),(0,a.kt)("h2",{id:"approach-2-segment-tree"},"Approach 2: Segment Tree"),(0,a.kt)("p",null,"It's kind of overkill and not necessary. Here's the code if you're interested."),(0,a.kt)(c,{mdxType:"Tabs"},(0,a.kt)(v,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"struct segtree {\n    int size;\n    // used to store even sum\n    vector<int> sums;\n\n    void init(int n) {\n        size = 1;\n        while (size < n) size *= 2;\n        sums.assign(2 * size, 0);\n    }\n\n    void set(int i, int v, int x, int lx, int rx) {\n        if (rx - lx == 1){\n            // set sums[x] to v only if v is even\n            sums[x] = v % 2 == 0 ? v : 0;\n            return;\n        }\n        int m = (lx + rx) / 2;\n        if (i < m) set(i, v, 2 * x + 1, lx, m);\n        else set(i, v, 2 * x + 2, m, rx);\n        sums[x] = sums[2 * x + 1] + sums[2 * x + 2];\n    }\n\n    void set(int i, int v) {\n        set(i, v, 0, 0, size);\n    }\n\n    int sum(int l, int r, int x, int lx, int rx) {\n        // no intersection\n        if (lx >= r || l >= rx) return 0;\n        // inside\n        if (lx >= l && rx <= r) return sums[x];\n        // go to both left and right side\n        int m = (lx + rx) / 2;\n        int s1 = sum(l, r, 2 * x + 1, lx, m);\n        int s2 = sum(l, r, 2 * x + 2, m, rx);\n        return s1 + s2;\n    }\n\n    int sum(int l, int r) {\n        return sum(l, r, 0, 0, size);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> sumEvenAfterQueries(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        // init segment tree\n        segtree st;\n        st.init(n);\n        // set each number in segment tree\n        for (int i = 0; i < n; i++) st.set(i, nums[i]);\n        vector<int> ans;\n        for (auto q : queries) {\n            int val = q[0], idx = q[1];\n            // update segment tree\n            st.set(idx, nums[idx] += val);\n            // query segement tree\n            ans.push_back(st.sum(0, n));\n        }\n        return ans;\n    }\n};\n")))))}g.isMDXComponent=!0}}]);