"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[88283],{3905:function(e,t,a){a.d(t,{Zo:function(){return l},kt:function(){return h}});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),i=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},l=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),u=i(a),h=s,k=u["".concat(o,".").concat(h)]||u[h]||c[h]||r;return a?n.createElement(k,p(p({ref:t},l),{},{components:a})):n.createElement(k,p({ref:t},l))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,p=new Array(r);p[0]=u;var m={};for(var o in t)hasOwnProperty.call(t,o)&&(m[o]=t[o]);m.originalType=e,m.mdxType="string"==typeof e?e:s,p[1]=m;for(var i=2;i<r;i++)p[i]=a[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},40738:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return m},metadata:function(){return i},suggestedProblems:function(){return u},toc:function(){return c}});var n=a(87462),s=a(63366),r=(a(67294),a(3905)),p=["components"],m={title:"Hash Map",description:"Hash Map provides quick lookup of certain values in O(1) time.",hide_table_of_contents:!0,keywords:["leetcode","tutorial","hash map","algorithm"]},o=void 0,i={unversionedId:"basic-topics/hash-map",id:"basic-topics/hash-map",title:"Hash Map",description:"Hash Map provides quick lookup of certain values in O(1) time.",source:"@site/tutorials/basic-topics/hash-map.md",sourceDirName:"basic-topics",slug:"/basic-topics/hash-map",permalink:"/leetcode-the-hard-way/tutorials/basic-topics/hash-map",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/tutorials/basic-topics/hash-map.md",tags:[],version:"current",frontMatter:{title:"Hash Map",description:"Hash Map provides quick lookup of certain values in O(1) time.",hide_table_of_contents:!0,keywords:["leetcode","tutorial","hash map","algorithm"]},sidebar:"tutorialSidebar",previous:{title:"Brute Force",permalink:"/leetcode-the-hard-way/tutorials/basic-topics/brute-force"},next:{title:"Heap (Priority Queue)",permalink:"/leetcode-the-hard-way/tutorials/basic-topics/heap"}},l={},c=[{value:"Overview",id:"overview",level:2}],u=[{problemName:"0217 - Contains Duplicate",difficulty:"Easy",leetCodeLink:"https://leetcode.com/problems/contains-duplicate/",solutionLink:"../../solutions/0200-0299/contains-duplicate-easy"},{problemName:"0219 - Contains Duplicate II",difficulty:"Easy",leetCodeLink:"https://leetcode.com/problems/contains-duplicate-ii/",solutionLink:"../../solutions/0200-0299/contains-duplicate-ii-easy"},{problemName:"0003 - Longest Substring Without Repeating Characters",difficulty:"Medium",leetCodeLink:"https://leetcode.com/problems/longest-substring-without-repeating-characters/",solutionLink:"../../solutions/0000-0099/longest-substring-without-repeating-characters-medium"},{problemName:"0706 - Design HashMap",difficulty:"Medium",leetCodeLink:"https://leetcode.com/problems/design-hashmap/",solutionLink:"../../solutions/0700-0799/design-hashmap-medium"}],h=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},k=h("TutorialAuthors"),N=h("Table"),d={toc:c,suggestedProblems:u};function f(e){var t=e.components,a=(0,s.Z)(e,p);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(k,{names:"@heiheihang",mdxType:"TutorialAuthors"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Hash Map provides quick lookup of certain values in ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," time, and it is very useful in many LeetCode questions. Let's take a look at the classic Two Sum question"),(0,r.kt)("p",null,"0001 - Two Sum (Easy) (",(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/two-sum/"},"LeetCode Link"),")"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Given an array of integers ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", return ",(0,r.kt)("em",{parentName:"p"},"indices of the two numbers such that they add up to ",(0,r.kt)("inlineCode",{parentName:"em"},"target")),"."),(0,r.kt)("p",{parentName:"blockquote"},"You may assume that each input would have ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"exactly")),(0,r.kt)("strong",{parentName:"p"}," one solution"),", and you may not use the ",(0,r.kt)("em",{parentName:"p"},"same")," element twice."),(0,r.kt)("p",{parentName:"blockquote"},"You can return the answer in any order.")),(0,r.kt)("p",null,"For example, given the following input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nums = [2,7,11,15], target = 9\n")),(0,r.kt)("p",null,"We can see that the first two elements (",(0,r.kt)("inlineCode",{parentName:"p"},"2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"7")," ) add up to the target (",(0,r.kt)("inlineCode",{parentName:"p"},"9)"),". So we need to return ",(0,r.kt)("inlineCode",{parentName:"p"},"[0,1]")," , as these two indices refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"7")," ."),(0,r.kt)("p",null,"The naive way to solve this problem is to use a nested for-loop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        #locate the first element\n        for i in range(len(nums)):\n            \n            #search the second element from i+1\n            for j in range(i+1, len(nums)):\n                \n                #check if they add up to target\n                if(nums[i] + nums[j] == target):\n                    \n                    #return the two indices if they do\n                    return [i, j]\n                \n        return -1\n")),(0,r.kt)("p",null,"We observe that with a nested for-loop, the runtime complexity is ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msup"},"n"),(0,r.kt)("mn",{parentName:"msup"},"2")),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n^2)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),". Let us look at how hash map can help us here."),(0,r.kt)("p",null,"Hash Map basically is a label. For example, if we want to store the (value, index) pair from the example above in a Hash Map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#we use {} to initialize a hash map\nhash_map = {}\n\n#we want to map the (value, index) pair in this list\ninput_1 = [2,7,11,15]\n\n#we put the (value, index) pair to the hash map\nhash_map[2] = 0 \nhash_map[7] = 1\nhash_map[11] = 2\nhash_map[15] = 3\n")),(0,r.kt)("p",null,"The special feature of hash map is that, from now on, if we want to know a value exists in ",(0,r.kt)("inlineCode",{parentName:"p"},"input_1")," or not, we can just perform:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'if( 7 in hash_map):\n    print("7 is in input_1")\nelse:\n    print("7 is not in input_1")\n')),(0,r.kt)("p",null,"This operation only takes ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," time! Without hash map, we would need to iterate the input to search for a specific element."),(0,r.kt)("p",null,"After understanding Hash Map, are you able to solve ",(0,r.kt)("a",{parentName:"p",href:"../../solutions/0000-0099/two-sum"},"Two Sum")," in ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"N"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," time?"),(0,r.kt)(N,{title:"Suggested Problems",data:u,mdxType:"Table"}))}f.isMDXComponent=!0}}]);