"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[72405],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,y=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},93744:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r,a=t(87462),o=t(63366),i=(t(67294),t(3905)),l=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/single-element-in-a-sorted-array/",tags:["Array","Binary Search"]},u="540 - Single Element in a Sorted Array (Medium)",p={unversionedId:"0500-0599/single-element-in-a-sorted-array-medium",id:"0500-0599/single-element-in-a-sorted-array-medium",title:"540 - Single Element in a Sorted Array (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/single-element-in-a-sorted-array/",source:"@site/solutions/0500-0599/0540-single-element-in-a-sorted-array-medium.md",sourceDirName:"0500-0599",slug:"/0500-0599/single-element-in-a-sorted-array-medium",permalink:"/leetcode-the-hard-way/solutions/0500-0599/single-element-in-a-sorted-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0500-0599/0540-single-element-in-a-sorted-array-medium.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Binary Search",permalink:"/leetcode-the-hard-way/solutions/tags/binary-search"}],version:"current",sidebarPosition:540,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/single-element-in-a-sorted-array/",tags:["Array","Binary Search"]},sidebar:"tutorialSidebar",previous:{title:"0532 - K-diff Pairs in an Array (Medium)",permalink:"/leetcode-the-hard-way/solutions/0500-0599/k-diff-pairs-in-an-array-medium"},next:{title:"0557 - Reverse Words in a String III (Easy)",permalink:"/leetcode-the-hard-way/solutions/0500-0599/reverse-words-in-a-string-iii-easy"}},m={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),y={toc:c};function f(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"540---single-element-in-a-sorted-array-medium"},"540 - Single Element in a Sorted Array (Medium)"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the single element that appears only once"),"."),(0,i.kt)("p",null,"Your solution must run in ",(0,i.kt)("inlineCode",{parentName:"p"},"O(log n)")," time and ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," space."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,1,2,3,3,4,4,8,8]\nOutput: 2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [3,3,7,7,10,11,11]\nOutput: 10\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 105")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 105"))),(0,i.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        // init possible boundary\n        int n = nums.size(), l = 0, r = n - 1;\n        while (l < r) {\n            // get the middle one\n            // for even number of elements, take the lower one\n            int m = l + (r - l) / 2;\n            // handle case like [3,3,7,7,10,11,11]\n             m -= m & 1;\n            // exclude m\n            if (nums[m] == nums[m + 1]) l = m + 2;\n            // include m\n            else r = m;\n        }\n        return nums[l];\n    }\n};\n")))}f.isMDXComponent=!0}}]);