"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[35663],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(k,a(a({ref:t},l),{},{components:n})):r.createElement(k,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49409:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return y},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var r,o=n(87462),i=n(63366),a=(n(67294),n(3905)),p=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/",tags:["Array","Dynamic Programming"]},c="0188 - Best Time to Buy and Sell Stock IV (Hard)",l={unversionedId:"0100-0199/best-time-to-buy-and-sell-stock-iv-hard",id:"0100-0199/best-time-to-buy-and-sell-stock-iv-hard",title:"0188 - Best Time to Buy and Sell Stock IV (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/",source:"@site/solutions/0100-0199/0188-best-time-to-buy-and-sell-stock-iv-hard.md",sourceDirName:"0100-0199",slug:"/0100-0199/best-time-to-buy-and-sell-stock-iv-hard",permalink:"/leetcode-the-hard-way/solutions/0100-0199/best-time-to-buy-and-sell-stock-iv-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0188-best-time-to-buy-and-sell-stock-iv-hard.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/leetcode-the-hard-way/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:188,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/",tags:["Array","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"0169 - Majority Element (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/majority-element-easy"},next:{title:"0191 - Number of 1 Bits (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/number-of-1-bits-easy"}},u={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP",id:"approach-1-dp",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),k={toc:m};function y(e){var t=e.components,n=(0,i.Z)(e,p);return(0,a.kt)("wrapper",(0,o.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0188---best-time-to-buy-and-sell-stock-iv-hard"},"0188 - Best Time to Buy and Sell Stock IV (Hard)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"prices")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"prices[i]")," is the price of a given stock on the ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," day, and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("p",null,"Find the maximum profit you can achieve. You may complete at most ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," transactions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= k <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= prices.length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= prices[i] <= 1000"))),(0,a.kt)("h2",{id:"approach-1-dp"},"Approach 1: DP"),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n        // no transaction, no profit\n        if (k == 0) return 0;\n        // dp[k][0] = min cost you need to spend at most k transactions\n        // dp[k][1] = max profit you can achieve at most k transactions\n        vector<vector<int>> dp(k + 1, vector<int>(2));\n        for (int i = 0; i <= k; i++) dp[i][0] = INT_MAX;\n        for (auto& price : prices) {\n            for (int i = 1; i <= k; i++) {\n                // price - dp[i - 1][1] is how much you need to spend\n                // i.e use the profit you earned from previous transaction to buy the stock\n                // we want to minimize it\n                dp[i][0] = min(dp[i][0], price - dp[i - 1][1]);\n                // price - dp[i][0] is how much you can achieve from previous min cost\n                // we want to maximize it\n                dp[i][1] = max(dp[i][1], price - dp[i][0]);\n            }\n        }\n        // return max profit at most k transactions\n        // or you can use `return dp.back()[1];`\n        return dp[k][1];\n    }\n};\n")),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        # no transaction, no profit\n        if k == 0: return 0\n        # dp[k][0] = min cost you need to spend at most k transactions\n        # dp[k][1] = max profit you can achieve at most k transactions\n        dp = [[1005, 0] for _ in range(k + 1)]\n        for price in prices:\n            for i in range(1, k + 1):\n                # price - dp[i - 1][1] is how much you need to spend\n                # i.e use the profit you earned from previous transaction to buy the stock\n                # we want to minimize it\n                dp[i][0] = min(dp[i][0], price - dp[i - 1][1])\n                # price - dp[i][0] is how much you can achieve from previous min cost\n                # we want to maximize it\n                dp[i][1] = max(dp[i][1], price - dp[i][0])\n        # return max profit at most k transactions\n        return dp[-1][1]\n")),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int maxProfit(int k, int[] prices) {\n        // no transaction, no profit\n        if (k == 0) return 0;\n        // dp[k][0] = min cost you need to spend at most k transactions\n        // dp[k][1] = max profit you can achieve at most k transactions\n        int [][] dp = new int[k + 1][2];\n        for (int i = 0; i <= k; i++) dp[i][0] = 1000;\n        for (int i = 0; i < prices.length; i++) {\n            for (int j = 1; j <= k; j++) {\n                // price - dp[i - 1][1] is how much you need to spend\n                // i.e use the profit you earned from previous transaction to buy the stock\n                // we want to minimize it\n                dp[j][0] = Math.min(dp[j][0], prices[i] - dp[j - 1][1]);\n                // price - dp[i][0] is how much you can achieve from previous min cost\n                // we want to maximize it\n                dp[j][1] = Math.max(dp[j][1], prices[i] - dp[j][0]);\n            }\n        }\n        // return max profit at most k transactions\n        return dp[k][1];\n    }\n}\n")))}y.isMDXComponent=!0}}]);