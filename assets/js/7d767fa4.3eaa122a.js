"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[75548],{3905:function(e,t,a){a.d(t,{Zo:function(){return i},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),l=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},i=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),u=l(a),h=r,d=u["".concat(o,".").concat(h)]||u[h]||c[h]||s;return a?n.createElement(d,p(p({ref:t},i),{},{components:a})):n.createElement(d,p({ref:t},i))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,p=new Array(s);p[0]=u;var m={};for(var o in t)hasOwnProperty.call(t,o)&&(m[o]=t[o]);m.originalType=e,m.mdxType="string"==typeof e?e:r,p[1]=m;for(var l=2;l<s;l++)p[l]=a[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7090:function(e,t,a){a.r(t),a.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return y},frontMatter:function(){return m},metadata:function(){return l},toc:function(){return c}});var n=a(87462),r=a(63366),s=(a(67294),a(3905)),p=["components"],m={description:"Author: @vigneshshiv | https://leetcode.com/problems/happy-number/"},o="0202 - Happy Number (Easy)",l={unversionedId:"0200-0299/happy-number-easy",id:"0200-0299/happy-number-easy",title:"0202 - Happy Number (Easy)",description:"Author: @vigneshshiv | https://leetcode.com/problems/happy-number/",source:"@site/solutions/0200-0299/0202-happy-number-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/happy-number-easy",permalink:"/leetcode-the-hard-way/solutions/0200-0299/happy-number-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0202-happy-number-easy.md",tags:[],version:"current",sidebarPosition:202,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/happy-number/"},sidebar:"tutorialSidebar",previous:{title:"0200 - Number of Islands (Medium)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/number-of-islands-medium"},next:{title:"0204 - Count Primes",permalink:"/leetcode-the-hard-way/solutions/0200-0299/count-primes"}},i={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Floyd&#39;s Tortoise and Hare",id:"approach-1-floyds-tortoise-and-hare",level:2}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)}},h=u("Tabs"),d=u("TabItem"),k=u("SolutionAuthor"),N={toc:c};function y(e){var t=e.components,a=(0,r.Z)(e,p);return(0,s.kt)("wrapper",(0,n.Z)({},N,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"0202---happy-number-easy"},"0202 - Happy Number (Easy)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/happy-number/"},"https://leetcode.com/problems/happy-number/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"Write an algorithm to determine if a number ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," is happy."),(0,s.kt)("p",null,"A ",(0,s.kt)("strong",{parentName:"p"},"happy number")," is a number defined by the following process:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Starting with any positive integer, replace the number by the sum of the squares of its digits."),(0,s.kt)("li",{parentName:"ul"},"Repeat the process until the number equals 1 (where it will stay), or it ",(0,s.kt)("strong",{parentName:"li"},"loops endlessly in a cycle")," which does not include 1."),(0,s.kt)("li",{parentName:"ul"},"Those numbers for which this process ",(0,s.kt)("strong",{parentName:"li"},"ends in 1")," are happy.")),(0,s.kt)("p",null,"Return ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," ",(0,s.kt)("em",{parentName:"p"},"if")," ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," ",(0,s.kt)("em",{parentName:"p"},"is a happy number, and")," ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," ",(0,s.kt)("em",{parentName:"p"},"if not"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: n = 2\nOutput: false\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"1 <= n <= 2^31 - 1"))),(0,s.kt)("h2",{id:"approach-1-floyds-tortoise-and-hare"},"Approach 1: Floyd's Tortoise and Hare"),(0,s.kt)("p",null,"As stated clearly in the problem, ",(0,s.kt)("strong",{parentName:"p"},"loops endlessly in a cycle"),", So we can solve this by using Floyd's Tortoise and Hare algorithm."),(0,s.kt)("p",null,"It's a simple cycle detection algorithm, where one pointer traverses twice as fast as another, once two pointers meet, we can trace back to where the cycle begins."),(0,s.kt)("p",null,"Time Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(m)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),", where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"m")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," - # of cycles"),(0,s.kt)("p",null,"Space complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,s.kt)(h,{mdxType:"Tabs"},(0,s.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(k,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isHappy(int n) {\n        int slow = n, fast = n;\n        do {\n            slow = digitSquareSum(slow);\n            fast = digitSquareSum(digitSquareSum(fast));\n        } while (slow != fast);\n        return slow == 1 ? true : false;\n    }\n    \n    public int digitSquareSum(int num) {\n        int ans = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            ans += digit * digit;\n            num /= 10;\n        }\n        return ans;\n    }\n}\n")))))}y.isMDXComponent=!0}}]);