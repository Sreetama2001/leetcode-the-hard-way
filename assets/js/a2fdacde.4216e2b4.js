"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[68155],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20233:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var r,a=n(87462),o=n(63366),i=(n(67294),n(3905)),l=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/ransom-note/",tags:["Hash Table","String","Counting"]},p="0383 - Ransom Note (Easy)",u={unversionedId:"0300-0399/ransom-note-easy",id:"0300-0399/ransom-note-easy",title:"0383 - Ransom Note (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/ransom-note/",source:"@site/solutions/0300-0399/0383-ransom-note-easy.md",sourceDirName:"0300-0399",slug:"/0300-0399/ransom-note-easy",permalink:"/leetcode-the-hard-way/solutions/0300-0399/ransom-note-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0383-ransom-note-easy.md",tags:[{label:"Hash Table",permalink:"/leetcode-the-hard-way/solutions/tags/hash-table"},{label:"String",permalink:"/leetcode-the-hard-way/solutions/tags/string"},{label:"Counting",permalink:"/leetcode-the-hard-way/solutions/tags/counting"}],version:"current",sidebarPosition:383,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/ransom-note/",tags:["Hash Table","String","Counting"]},sidebar:"tutorialSidebar",previous:{title:"0377 - Combination Sum IV (Medium)",permalink:"/leetcode-the-hard-way/solutions/0300-0399/combination-sum-iv-medium"},next:{title:"0389 - Find the Difference (Easy)",permalink:"/leetcode-the-hard-way/solutions/0300-0399/find-the-difference-easy"}},c={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting",id:"approach-1-counting",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),f={toc:m};function g(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0383---ransom-note-easy"},"0383 - Ransom Note (Easy)"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"ransomNote")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"magazine"),", return ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),(0,i.kt)("em",{parentName:"p"},"if"),(0,i.kt)("inlineCode",{parentName:"p"},"ransomNote"),(0,i.kt)("em",{parentName:"p"},"can be constructed by using the letters from"),(0,i.kt)("inlineCode",{parentName:"p"},"magazine"),(0,i.kt)("em",{parentName:"p"},"and"),(0,i.kt)("inlineCode",{parentName:"p"},"false"),(0,i.kt)("em",{parentName:"p"},"otherwise"),"."),(0,i.kt)("p",null,"Each letter in ",(0,i.kt)("inlineCode",{parentName:"p"},"magazine")," can only be used once in ",(0,i.kt)("inlineCode",{parentName:"p"},"ransomNote"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: ransomNote = "a", magazine = "b"\nOutput: false\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: ransomNote = "aa", magazine = "ab"\nOutput: false\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: ransomNote = "aa", magazine = "aab"\nOutput: true\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= ransomNote.length, magazine.length <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ransomNote")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"magazine")," consist of lowercase English letters.")),(0,i.kt)("h2",{id:"approach-1-counting"},"Approach 1: Counting"),(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        // you can also use unordered_map<int, int> m; here\n        // since we're just dealing with lowercase English letters, \n        // we can just use an array of length 26 to store the frequency of them\n        int m[26] = {0};\n        // count each character\n        for(char c : magazine) m[c - 'a']++;\n        // check if it can be found in m and substract by 1 \n        for(char c : ransomNote) {\n            // if it is less than 0, it means it cannot be constructed from magazine\n            if(--m[c - 'a'] < 0) return false;\n        }\n        return true;\n    }\n};\n")))}g.isMDXComponent=!0}}]);