"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4164],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(r),f=o,m=p["".concat(s,".").concat(f)]||p[f]||u[f]||a;return r?n.createElement(m,i(i({ref:t},l),{},{components:r})):n.createElement(m,i({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},13683:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],c={title:"Ordered Set and GNU C++ PBDS",description:"a policy based data structure in g++ that keeps the unique elements in sorted order",hide_table_of_contents:!1,keywords:["leetcode","template","ordered set","gnu c++ pbds"]},s=void 0,d={unversionedId:"ordered-set",id:"ordered-set",title:"Ordered Set and GNU C++ PBDS",description:"a policy based data structure in g++ that keeps the unique elements in sorted order",source:"@site/templates/ordered-set.md",sourceDirName:".",slug:"/ordered-set",permalink:"/leetcode-the-hard-way/templates/ordered-set",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/ordered-set.md",tags:[],version:"current",frontMatter:{title:"Ordered Set and GNU C++ PBDS",description:"a policy based data structure in g++ that keeps the unique elements in sorted order",hide_table_of_contents:!1,keywords:["leetcode","template","ordered set","gnu c++ pbds"]},sidebar:"tutorialSidebar",previous:{title:"Graph Theory",permalink:"/leetcode-the-hard-way/templates/graph-theory"},next:{title:"Segment Tree",permalink:"/leetcode-the-hard-way/templates/segment-tree"}},l={},u=[],p={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n\ntree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> x;\ntree<int, null_type, greater<int>, rb_tree_tag, tree_order_statistics_node_update> y;\ntree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> p;\ntree<int, null_type, greater_equal<int>, rb_tree_tag, tree_order_statistics_node_update> q;\n\n\nvoid solve() {\n    int k = 5;\n    x.insert(k);\n    // Number of items strictly smaller than k\n    x.order_of_key(k);\n    // K-th element in a set (counting from zero)\n    x.find_by_order(k);\n}\n")))}f.isMDXComponent=!0}}]);