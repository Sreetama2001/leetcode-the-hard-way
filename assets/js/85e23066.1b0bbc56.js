"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[26104],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=o,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||i;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},61197:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return c}});var n,o=r(87462),i=r(63366),a=(r(67294),r(3905)),l=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/reordered-power-of-2/",tags:["Math","Sorting","Counting","Enumeration"]},p="0869 - Reordered Power of 2 (Medium)",s={unversionedId:"0800-0899/reordered-power-of-2-medium",id:"0800-0899/reordered-power-of-2-medium",title:"0869 - Reordered Power of 2 (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/reordered-power-of-2/",source:"@site/solutions/0800-0899/0869-reordered-power-of-2-medium.md",sourceDirName:"0800-0899",slug:"/0800-0899/reordered-power-of-2-medium",permalink:"/leetcode-the-hard-way/solutions/0800-0899/reordered-power-of-2-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0869-reordered-power-of-2-medium.md",tags:[{label:"Math",permalink:"/leetcode-the-hard-way/solutions/tags/math"},{label:"Sorting",permalink:"/leetcode-the-hard-way/solutions/tags/sorting"},{label:"Counting",permalink:"/leetcode-the-hard-way/solutions/tags/counting"},{label:"Enumeration",permalink:"/leetcode-the-hard-way/solutions/tags/enumeration"}],version:"current",sidebarPosition:869,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/reordered-power-of-2/",tags:["Math","Sorting","Counting","Enumeration"]},sidebar:"tutorialSidebar",previous:{title:"0852 - Peak Index in a Mountain Array (Easy)",permalink:"/leetcode-the-hard-way/solutions/0800-0899/peak-index-in-a-mountain-array-easy"},next:{title:"0877 - Stone Game (Medium)",permalink:"/leetcode-the-hard-way/solutions/0800-0899/stone-game-medium"}},d={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting",id:"approach-1-sorting",level:2}],m=(n="SolutionAuthor",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),f={toc:c};function h(e){var t=e.components,r=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0869---reordered-power-of-2-medium"},"0869 - Reordered Power of 2 (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),". We reorder the digits in any order (including the original order) such that the leading digit is not zero."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," ",(0,a.kt)("em",{parentName:"p"},"if and only if we can do this so that the resulting number is a power of two"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 1\nOutput: true\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 10\nOutput: false\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 109"))),(0,a.kt)("h2",{id:"approach-1-sorting"},"Approach 1: Sorting"),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string sortStr(int n) {\n        // since the input is an integer,\n        // we convert it to a string first\n        string t = to_string(n);\n        // use STL to sort\n        sort(t.begin(), t.end());\n        // return the string\n        return t;\n    }\n    \n    // the idea is to sort `n` and compare all sorted power of two\n    // if they are matched, then it means they can be reordered to each other\n    bool reorderedPowerOf2(int n) {\n        // since the sorted string of n is always same\n        // so we convert it here instead of doing it in the loop\n        string s = sortStr(n);\n        for (int i = 0; i < 30; i++) {\n            // power of 2 = 1 << i\n            // we sort each power of 2 string\n            string t = sortStr(1 << i);\n            // and compare with `s`\n            // if they are matched, then return true\n            if (s == t) return true;\n        }\n        // otherwise it is not possible to reorder to a power of 2\n        return false;\n    }\n};\n")))}h.isMDXComponent=!0}}]);