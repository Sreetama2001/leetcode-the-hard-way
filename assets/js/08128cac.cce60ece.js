"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[31224],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(n),d=r,b=c["".concat(u,".").concat(d)]||c[d]||p[d]||i;return n?a.createElement(b,o(o({ref:t},m),{},{components:n})):a.createElement(b,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74125:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and/"},u="2419 - Longest Subarray With Maximum Bitwise AND (Medium)",l={unversionedId:"2400-2499/longest-subarray-with-maximum-bitwise-and-medium",id:"2400-2499/longest-subarray-with-maximum-bitwise-and-medium",title:"2419 - Longest Subarray With Maximum Bitwise AND (Medium)",description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and/",source:"@site/solutions/2400-2499/2419-longest-subarray-with-maximum-bitwise-and-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/longest-subarray-with-maximum-bitwise-and-medium",permalink:"/leetcode-the-hard-way/solutions/2400-2499/longest-subarray-with-maximum-bitwise-and-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2419-longest-subarray-with-maximum-bitwise-and-medium.md",tags:[],version:"current",sidebarPosition:2419,frontMatter:{description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and/"},sidebar:"tutorialSidebar",previous:{title:"2418 - Sort the People (Easy)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/sort-the-people-easy"},next:{title:"2420 - Find All Good Indices (Medium)",permalink:"/leetcode-the-hard-way/solutions/2400-2499/find-all-good-indices-medium"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Consecutive Max Element",id:"approach-1-consecutive-max-element",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},d=c("Tabs"),b=c("TabItem"),h=c("SolutionAuthor"),y={toc:p};function g(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2419---longest-subarray-with-maximum-bitwise-and-medium"},"2419 - Longest Subarray With Maximum Bitwise AND (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and/"},"https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," of size ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,i.kt)("p",null,"Consider a ",(0,i.kt)("strong",{parentName:"p"},"non-empty")," subarray from ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," that has the ",(0,i.kt)("strong",{parentName:"p"},"maximum")," possible ",(0,i.kt)("strong",{parentName:"p"},"bitwise AND"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In other words, let ",(0,i.kt)("inlineCode",{parentName:"li"},"k")," be the maximum value of the bitwise AND of ",(0,i.kt)("strong",{parentName:"li"},"any")," subarray of ",(0,i.kt)("inlineCode",{parentName:"li"},"nums"),". Then, only subarrays with a bitwise AND equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"k")," should be considered.")),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the length of the ",(0,i.kt)("strong",{parentName:"em"},"longest")," such subarray"),"."),(0,i.kt)("p",null,"The bitwise AND of an array is the bitwise AND of all the numbers in it."),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"subarray")," is a contiguous sequence of elements within an array."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,3,2,2]\nOutput: 2\nExplanation:\nThe maximum possible bitwise AND of a subarray is 3.\nThe longest subarray with that value is [3,3], so we return 2.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,4]\nOutput: 1\nExplanation:\nThe maximum possible bitwise AND of a subarray is 4.\nThe longest subarray with that value is [4], so we return 1.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 105")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 106"))),(0,i.kt)("h2",{id:"approach-1-consecutive-max-element"},"Approach 1: Consecutive Max Element"),(0,i.kt)(d,{mdxType:"Tabs"},(0,i.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int longestSubarray(vector<int>& nums) {\n        // the bitwise AND of two different numbers will always be strictly less than the maximum of those two numbers\n        // so the longest subarray with max bitwise AND would be the subarray containing only the max numbers\n        int mx = *max_element(nums.begin(), nums.end());\n        int ans, cnt = 0;\n        for (auto &x : nums) {\n            // increase the count by 1 if it is same as the max number\n            if (x == mx) cnt += 1;\n            // else reset it\n            else cnt = 0;\n            // update ans\n            ans = max(ans, cnt);\n        }\n        return ans;\n    }\n};\n"))),(0,i.kt)(b,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(h,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    public int longestSubarray(int[] nums) {\n        int max = 0, longest = 1, current = 0;\n        for (int num : nums) {\n            max = Math.max(max, num);\n        }\n        for (int num : nums) {\n            if (num == max) {\n                longest = Math.max(longest, ++current);\n            } else {\n                current = 0;\n            }\n        }\n        return longest;\n    }\n}\n")))))}g.isMDXComponent=!0}}]);