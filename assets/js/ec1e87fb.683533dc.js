"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[23287],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var l=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?l.createElement(h,o(o({ref:t},c),{},{components:n})):l.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var p=2;p<r;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},52992:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var l=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],a={description:"Author: @lonyehan, @vigneshshiv | https://leetcode.com/problems/linked-list-cycle/",tags:["Hash Table","Linked List","Two Pointers"]},s="0141 - Linked List Cycle (Easy)",p={unversionedId:"0100-0199/linked-list-cycle",id:"0100-0199/linked-list-cycle",title:"0141 - Linked List Cycle (Easy)",description:"Author: @lonyehan, @vigneshshiv | https://leetcode.com/problems/linked-list-cycle/",source:"@site/solutions/0100-0199/0141-linked-list-cycle.md",sourceDirName:"0100-0199",slug:"/0100-0199/linked-list-cycle",permalink:"/leetcode-the-hard-way/solutions/0100-0199/linked-list-cycle",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0141-linked-list-cycle.md",tags:[{label:"Hash Table",permalink:"/leetcode-the-hard-way/solutions/tags/hash-table"},{label:"Linked List",permalink:"/leetcode-the-hard-way/solutions/tags/linked-list"},{label:"Two Pointers",permalink:"/leetcode-the-hard-way/solutions/tags/two-pointers"}],version:"current",sidebarPosition:141,frontMatter:{description:"Author: @lonyehan, @vigneshshiv | https://leetcode.com/problems/linked-list-cycle/",tags:["Hash Table","Linked List","Two Pointers"]},sidebar:"tutorialSidebar",previous:{title:"0136 - Single Number (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/single-number-easy"},next:{title:"0144 - Binary Tree Preorder Traversal (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/binary-tree-preorder-traversal-easy"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},m=d("Tabs"),h=d("TabItem"),k=d("SolutionAuthor"),f={toc:u};function y(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,l.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0141---linked-list-cycle-easy"},"0141 - Linked List Cycle (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle/"},"https://leetcode.com/problems/linked-list-cycle/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given ",(0,r.kt)("inlineCode",{parentName:"p"},"head"),", the head of a linked list, determine if the linked list has a cycle in it."),(0,r.kt)("p",null,"There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," pointer. Internally, ",(0,r.kt)("inlineCode",{parentName:"p"},"pos")," is used to denote the index of the node that tail's ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," pointer is connected to. ",(0,r.kt)("strong",{parentName:"p"},"Note that ",(0,r.kt)("inlineCode",{parentName:"strong"},"pos")," is not passed as a parameter"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," ",(0,r.kt)("em",{parentName:"p"},"if there is a cycle in the linked list"),". Otherwise, return ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The number of the nodes in the list is in the range ",(0,r.kt)("inlineCode",{parentName:"li"},"[0, 10^4]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pos")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"-1")," or a ",(0,r.kt)("strong",{parentName:"li"},"valid index")," in the linked-list.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Follow up:")," Can you solve it using ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," (i.e. constant) memory?"),(0,r.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two Pointers"),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(h,{value:"cs",label:"C#",mdxType:"TabItem"},(0,r.kt)(k,{name:"@lonyehan",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public bool HasCycle(ListNode head) {\n        ListNode slowPointer = head;\n        ListNode quickPointer = head;\n        \n        if(head == null) return false;\n        \n        while(head != null) {\n            // slow pointer, move one step each time.\n            slowPointer = slowPointer.next;\n            if(slowPointer == null) return false;\n            \n            // quick pointer, move two steps each time.\n            quickPointer = quickPointer?.next?.next;\n            if(quickPointer == null) return false;\n            \n            // slow pointer meets quick pointer means that there is a cycle in this linked list\n            if(slowPointer == quickPointer) return true;\n        }\n        \n        return false;\n    }\n}\n"))),(0,r.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(k,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n// Time complexity: O(n), where n - # of nodes in the list\n// Space complexity: O(1)\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null) return false;\n        // Fast & Slow pointer\n        ListNode slow = head;\n        ListNode fast = head;\n        // Fast Reference to check if it's not null, because it's traverse twice as fast as slow\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            // If both meet at the same node then there is a loop\n            if (slow == fast) {\n                return true;\n            }\n        }\n        // If no loop, fast pointer at the end reached it's last node null pointer\n        return false;\n    }\n}\n")))))}y.isMDXComponent=!0}}]);