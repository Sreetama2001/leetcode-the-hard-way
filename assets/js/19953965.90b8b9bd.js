"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[77598],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||a;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},59668:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return m},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var i,r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/stone-game-ii/",tags:["Array","Math","Dynamic Programming","Game Theory"]},m="1140 - Stone Game II (Medium)",p={unversionedId:"1100-1199/stone-game-ii-medium",id:"1100-1199/stone-game-ii-medium",title:"1140 - Stone Game II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/stone-game-ii/",source:"@site/solutions/1100-1199/1140-stone-game-ii-medium.md",sourceDirName:"1100-1199",slug:"/1100-1199/stone-game-ii-medium",permalink:"/leetcode-the-hard-way/solutions/1100-1199/stone-game-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1140-stone-game-ii-medium.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Math",permalink:"/leetcode-the-hard-way/solutions/tags/math"},{label:"Dynamic Programming",permalink:"/leetcode-the-hard-way/solutions/tags/dynamic-programming"},{label:"Game Theory",permalink:"/leetcode-the-hard-way/solutions/tags/game-theory"}],version:"current",sidebarPosition:1140,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/stone-game-ii/",tags:["Array","Math","Dynamic Programming","Game Theory"]},sidebar:"tutorialSidebar",previous:{title:"1135 - Connecting Cities With Minimum Cost (Medium)",permalink:"/leetcode-the-hard-way/solutions/1100-1199/connecting-cities-with-minimum-cost-medium"},next:{title:"1143 - Longest Common Subsequence (Medium)",permalink:"/leetcode-the-hard-way/solutions/1100-1199/longest-common-subsequence-medium"}},u={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],d=(i="SolutionAuthor",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),h={toc:c};function g(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1140---stone-game-ii-medium"},"1140 - Stone Game II (Medium)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Alice and Bob continue their\xa0games with piles of stones.\xa0 There are a number of\xa0piles\xa0",(0,o.kt)("strong",{parentName:"p"},"arranged in a row"),", and each pile has a positive integer number of stones\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"piles[i]"),".\xa0 The objective of the game is to end with the most\xa0stones."),(0,o.kt)("p",null,"Alice\xa0and Bob take turns, with Alice starting first.\xa0 Initially, ",(0,o.kt)("inlineCode",{parentName:"p"},"M = 1"),"."),(0,o.kt)("p",null,"On each player's turn, that player\xa0can take ",(0,o.kt)("strong",{parentName:"p"},"all the stones")," in the ",(0,o.kt)("strong",{parentName:"p"},"first")," ",(0,o.kt)("inlineCode",{parentName:"p"},"X")," remaining piles, where ",(0,o.kt)("inlineCode",{parentName:"p"},"1 <= X <= 2M"),".\xa0 Then, we set\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"M = max(M, X)"),"."),(0,o.kt)("p",null,"The game continues until all the stones have been taken."),(0,o.kt)("p",null,"Assuming Alice and Bob play optimally, return the maximum number of stones Alice\xa0can get."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: piles = [2,7,9,4,4]\nOutput: 10\nExplanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: piles = [1,2,3,4,5,100]\nOutput: 104\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= piles.length <= 100")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= piles[i]\xa0<= 10^4"))),(0,o.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // dp[i][j] = max stones you can get from piles[i:] with M = j\n    int dp[101][200], n;\n    int dfs(vector<int>& piles, int i, int m, int total) {\n        // if we calculated the result before, use it directly\n        if (dp[i][m] != -1) return dp[i][m];\n        // res: used to compare the max number of stones\n        // taken: used to record how many stones we've taken\n        int res = 0, taken = 0;\n        // i is the starting position\n        // we can take at most i + 2 * m piles\n        // however, it may exceed the size of piles \n        // hence use min to get the max limit\n        for (int j = i; j < min(i + 2 * m, n); j++) {\n            // take this pile of stones\n            taken += piles[j];\n            // move to the next position\n            // with the new M = max(M, X)\n            // where X is how many piles we've taken so far which is j - i + 1\n            res = max(res, total - dfs(piles, j + 1, max(m, j - i + 1), total - taken));\n        }\n        // memoize the result\n        return dp[i][m] = res;\n    }\n    \n    int stoneGameII(vector<int>& piles) {\n        // init dp with value -1\n        memset(dp, -1, sizeof(dp));\n        n = piles.size();\n        return dfs(piles, 0, 1, accumulate(piles.begin(), piles.end(), 0));\n    }\n};\n")))}g.isMDXComponent=!0}}]);