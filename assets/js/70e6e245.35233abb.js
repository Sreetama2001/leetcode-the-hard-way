"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[89204],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86465:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var i,r=n(87462),a=n(63366),o=(n(67294),n(3905)),s=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/shifting-letters-ii/"},p="2381 - Shifting Letters II (Medium)",c={unversionedId:"2300-2399/shifting-letters-ii-medium",id:"2300-2399/shifting-letters-ii-medium",title:"2381 - Shifting Letters II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/shifting-letters-ii/",source:"@site/solutions/2300-2399/2381-shifting-letters-ii-medium.md",sourceDirName:"2300-2399",slug:"/2300-2399/shifting-letters-ii-medium",permalink:"/leetcode-the-hard-way/solutions/2300-2399/shifting-letters-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2381-shifting-letters-ii-medium.md",tags:[],version:"current",sidebarPosition:2381,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/shifting-letters-ii/"},sidebar:"tutorialSidebar",previous:{title:"2380 - Time Needed to Rearrange a Binary String (Medium)",permalink:"/leetcode-the-hard-way/solutions/2300-2399/time-needed-to-rearrange-a-binary-string-medium"},next:{title:"2383 - Minimum Hours of Training to Win a Competition (Easy)",permalink:"/leetcode-the-hard-way/solutions/2300-2399/minimum-hours-of-training-to-win-a-competition-easy"}},u={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Line Sweep",id:"approach-1-line-sweep",level:2}],m=(i="SolutionAuthor",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),h={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2381---shifting-letters-ii-medium"},"2381 - Shifting Letters II (Medium)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a string ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," of lowercase English letters and a 2D integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"shifts")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"shifts[i] = [starti, endi, directioni]"),". For every ",(0,o.kt)("inlineCode",{parentName:"p"},"i"),", ",(0,o.kt)("strong",{parentName:"p"},"shift")," the characters in ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," from the index ",(0,o.kt)("inlineCode",{parentName:"p"},"starti")," to the index ",(0,o.kt)("inlineCode",{parentName:"p"},"endi")," (",(0,o.kt)("strong",{parentName:"p"},"inclusive"),") forward if ",(0,o.kt)("inlineCode",{parentName:"p"},"directioni = 1"),", or shift the characters backward if ",(0,o.kt)("inlineCode",{parentName:"p"},"directioni = 0"),"."),(0,o.kt)("p",null,"Shifting a character ",(0,o.kt)("strong",{parentName:"p"},"forward")," means replacing it with the ",(0,o.kt)("strong",{parentName:"p"},"next")," letter in the alphabet (wrapping around so that ",(0,o.kt)("inlineCode",{parentName:"p"},"'z'")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"'a'"),"). Similarly, shifting a character ",(0,o.kt)("strong",{parentName:"p"},"backward")," means replacing it with the ",(0,o.kt)("strong",{parentName:"p"},"previous")," letter in the alphabet (wrapping around so that ",(0,o.kt)("inlineCode",{parentName:"p"},"'a'")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"'z'"),")."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the final string after all such shifts to"),(0,o.kt)("inlineCode",{parentName:"p"},"s"),(0,o.kt)("em",{parentName:"p"},"are applied"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "abc", shifts = [[0,1,0],[1,2,1],[0,2,1]]\nOutput: "ace"\nExplanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = "zac".\nSecondly, shift the characters from index 1 to index 2 forward. Now s = "zbd".\nFinally, shift the characters from index 0 to index 2 forward. Now s = "ace".\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "dztz", shifts = [[0,0,0],[1,1,1]]\nOutput: "catz"\nExplanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = "cztz".\nFinally, shift the characters from index 1 to index 1 forward. Now s = "catz".\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= s.length, shifts.length <= 5 * 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"shifts[i].length == 3")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= start_i <= end_i < s.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= directioni <= 1")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s")," consists of lowercase English letters.")),(0,o.kt)("h2",{id:"approach-1-line-sweep"},"Approach 1: Line Sweep"),(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string shiftingLetters(string s, vector<vector<int>>& shifts) {\n        int n = s.size();\n        vector<int> line(n + 1, 0);\n        // standard line sweep\n        for (auto& s : shifts) {\n            int start = s[0],\n                end   = s[1],\n            direction = s[2];\n            line[start] += direction ? 1 : -1;\n            line[end + 1] += direction ? -1 : 1;\n        }\n        // calculate the prefix sum\n        partial_sum(line.begin(), line.end(), line.begin());\n        // for each character\n        for (int i = 0; i < n; i++) {\n            // we calculate the new index value\n            int v = (s[i] - 'a' + line[i]) % 26;\n            // v can be negative if it is shifting backward\n            // in this case, we need to turn it back to positive\n            if (v < 0) v = (v % 26 + 26) % 26;\n            // in place update character at position i \n            s[i] = 'a' + v;\n        }\n        return s;\n    }\n};\n")))}f.isMDXComponent=!0}}]);